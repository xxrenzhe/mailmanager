name: Docker Image Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=prod-latest,enable={{is_default_branch}}
          type=raw,value=dev-latest,enable={{is_default_branch}}
          type=semver,pattern={{version}},prefix=prod-
        flavor: |
          latest=false

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate image metadata
      run: |
        echo "Image tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest: ${{ steps.build.outputs.digest }}"

    - name: Create deploy summary
      run: |
        echo "## üöÄ Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: `${{ env.IMAGE_NAME }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: `${{ join(steps.meta.outputs.tags, ', ') }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: `${{ steps.meta.outputs.digest }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: `linux/amd64, linux/arm64`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: `${{ github.sha }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: `${{ github.ref_name }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Actor**: `${{ github.actor }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: `${{ github.workflow }}`" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: `${{ github.run_id }}`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîÑ Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. **Manual Deploy**: Use the new Docker image in your cloud platform" >> $GITHUB_STEP_SUMMARY
        echo "2. **Image Tag**: `docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Production**: Deploy to your production environment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated at: $(date)*" >> $GITHUB_STEP_SUMMARY

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on build result
  notify:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always()

    steps:
    - name: Build successful notification
      if: needs.build.result == 'success'
      run: |
        echo "üéâ ==============================================="
        echo "üöÄ Docker Image Build & Deploy Successful!"
        echo "üéâ ==============================================="
        echo ""
        echo "üì¶ Image Details:"
        echo "  Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "  Tag: prod-latest"
        echo "  Digest: ${{ needs.build.outputs.digest }}"
        echo "  Pull Command: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest"
        echo ""
        echo "üìã Build Information:"
        echo "  Commit: ${{ github.sha }}"
        echo "  Branch: ${{ github.ref_name }}"
        echo "  Actor: ${{ github.actor }}"
        echo "  Workflow: ${{ github.workflow }}"
        echo "  Run ID: ${{ github.run_id }}"
        echo "  Platforms: linux/amd64,linux/arm64"
        echo ""
        echo "üîó Quick Deploy:"
        echo "  docker run -d --name mailmanager -p 80:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prod-latest"
        echo ""
        echo "‚úÖ Build completed successfully!"

    - name: Build failed notification
      if: needs.build.result == 'failure' || needs.build.result == 'cancelled'
      run: |
        echo "‚ùå ==============================================="
        echo "üö® Docker Build Failed!"
        echo "‚ùå ==============================================="
        echo ""
        echo "üîç Debug Information:"
        echo "  Build Result: ${{ needs.build.result }}"
        echo "  Security Scan Result: ${{ needs.security-scan.result }}"
        echo "  Commit: ${{ github.sha }}"
        echo "  Branch: ${{ github.ref_name }}"
        echo ""

    - name: Security scan summary
      if: always() && needs.security-scan.result == 'success'
      run: |
        echo "üîí Security Scan: ‚úÖ PASSED"
        echo "   No critical vulnerabilities detected"

    - name: Security scan failed
      if: needs.security-scan.result == 'failure'
      run: |
        echo "üîí Security Scan: ‚ö†Ô∏è  ISSUES FOUND"
        echo "   Check Security tab in GitHub repository for details"