name: Docker Image Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          ghcr.io/xxrenzhe/mailmanager:prod-latest
          ghcr.io/xxrenzhe/mailmanager:dev-latest
          ghcr.io/xxrenzhe/mailmanager:prod-{{version}}
        flavor: |
          latest=false

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate image metadata
      run: |
        echo "Image tags: ${{ steps.meta.outputs.tags }}"
        echo "Image digest: ${{ steps.meta.outputs.digest }}"

    - name: Create deploy summary
      run: |
        echo "## üöÄ Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GitHub_STEP_SUMMARY
        echo "### üì¶ Image Details" >> $GITHUB_SUMMARY
        echo "- **Repository**: `${{ env.IMAGE_NAME }}`" >> $GITHUB_SUMMARY
        echo "- **Tags**: `${{ join(steps.meta.outputs.tags, ', ') }}`" >> $GitHub_SUMMARY
        echo "- **Digest**: `${{ steps.meta.outputs.digest }}`" >> $ITHUB_SUMMARY
        echo "- **Platforms**: `linux/amd64, linux/arm64`" >> $GitHub_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Build Information" >> $GitHub_STEP_SUMMARY
        echo "- **Commit**: `${{ github.sha }}`" >> $GITHUB_SUMMARY
        echo "- **Branch**: `${{ github.ref_name }}`" >> $GitHub_SUMMARY
        echo "- **Actor**: `${{ github.actor }}`" >> $GITHUB_SUMMARY
        echo "- **Workflow**: `${{ github.workflow }}`" >> $GITHUB_SUMMARY
        echo "- **Run ID**: `${{ github.run_id }}`" >> $ITHUB_SUMMARY
        echo "" >> $ITHUB_STEP_SUMMARY
        echo "### üîÑ Next Steps" >> $GitHub_SUMMARY
        echo "1. **Manual Deploy**: Use the new Docker image in your cloud platform" >> $GITHUB_STEP_SUMMARY
        echo "2. **Image Tag**: `docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main`" >> $GitHub_STEP_SUMMARY
        echo "3. **Production**: Deploy to your production environment" >> $GITHUB_SUMMARY
        echo "" >> $ITHUB_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated at: $(date)*" >> $GITHUB_STEP_SUMMARY

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'

    permissions:
      contents: read
      security-events: write

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.build.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on success
  notify:
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: always()

    steps:
    - name: Notify on success
      if: needs.build.result == 'success'
      run: |
        echo "‚úÖ Docker image built and pushed successfully!"
        echo "Repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "Tags: ${{ needs.build.outputs.tags }}"

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Docker build failed!"
        echo "Please check the workflow logs for details."