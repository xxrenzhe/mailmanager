<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>账户</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, sans-serif;
      margin: 16px;
      background: #f5f5f5;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
    }
    .card {
      background: white;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 16px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .btn {
      padding: 8px 16px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
      min-width: 40px;
      height: 36px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 4px;
      white-space: nowrap;
    }
    .btn.primary {
      background: #007bff;
      color: white;
    }
    .btn:hover {
      opacity: 0.9;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      background: white;
      border-radius: 8px;
      overflow: hidden;
    }
    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #eee;
    }
    th {
      background: #f8f9fa;
      font-weight: 600;
      cursor: pointer;
    }
    .muted {
      color: #666;
      font-size: 12px;
    }
    .pill {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 12px;
      background: #e9ecef;
    }
    .status-authorized {
      background: #d4edda;
      color: #155724;
    }
    .status-pending {
      background: #fff3cd;
      color: #856404;
    }
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 16px;
      background: #28a745;
      color: white;
      border-radius: 4px;
      z-index: 1000;
      transform: translateX(400px);
      transition: transform 0.3s ease;
    }
    .notification.show {
      transform: translateX(0);
    }
    .notification.error {
      background: #dc3545;
    }
    .row {
      display: flex;
      gap: 8px;
      align-items: center;
      margin-bottom: 12px;
    }

    /* 监控状态样式 */
    .monitor-status {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 6px 12px;
      background: rgba(0, 0, 0, 0.05);
      border-radius: 6px;
      font-size: 14px;
    }

    .status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      font-weight: 500;
    }

    .status-indicator::before {
      content: '';
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: #666;
      animation: pulse 2s infinite;
    }

    .status-indicator.connected::before {
      background: #28a745;
    }

    .status-indicator.disconnected::before {
      background: #dc3545;
      animation: none;
    }

    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    /* 新验证码高亮动画 */
    .new-codes-detected {
      animation: highlight-new-codes 3s ease-in-out;
    }

    @keyframes highlight-new-codes {
      0% { box-shadow: 0 0 20px rgba(40, 167, 69, 0.5); }
      50% { box-shadow: 0 0 30px rgba(40, 167, 69, 0.8); }
      100% { box-shadow: none; }
    }

    table.new-codes-detected {
      border: 2px solid #28a745;
      transition: all 0.3s ease;
    }

    table.new-codes-detected td {
      background: rgba(40, 167, 69, 0.05);
    }

    .code-highlight {
      animation: code-glow 2s ease-in-out;
      background: rgba(40, 167, 69, 0.1) !important;
      border: 1px solid #28a745;
      border-radius: 4px;
      padding: 4px 8px;
    }

    @keyframes code-glow {
      0% { background: rgba(40, 167, 69, 0.3); }
      50% { background: rgba(40, 167, 69, 0.5); }
      100% { background: rgba(40, 167, 69, 0.1); }
    }

    /* 设置面板样式 */
    .settings-panel {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .settings-content {
      background: white;
      border-radius: 12px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
      width: 400px;
      max-width: 90%;
      overflow: hidden;
    }

    .settings-header {
      padding: 20px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .settings-header h3 {
      margin: 0;
      font-size: 18px;
    }

    .settings-body {
      padding: 20px;
    }

    .setting-group {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .setting-group label {
      font-weight: 500;
      color: #333;
    }

    .setting-group select {
      padding: 6px 12px;
      border: 1px solid #ddd;
      border-radius: 6px;
      background: white;
      min-width: 120px;
    }

    /* 开关样式 */
    .toggle-switch {
      position: relative;
      width: 50px;
      height: 24px;
    }

    .toggle-switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      transition: .4s;
      border-radius: 24px;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 18px;
      width: 18px;
      left: 3px;
      bottom: 3px;
      background-color: white;
      transition: .4s;
      border-radius: 50%;
    }

    input:checked + .slider {
      background-color: #007bff;
    }

    input:checked + .slider:before {
      transform: translateX(26px);
    }

    .settings-footer {
      padding: 20px;
      border-top: 1px solid #eee;
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }

    /* 智能触发脉冲动画 */
    @keyframes pulse {
      0% { opacity: 1; }
      50% { opacity: 0.5; }
      100% { opacity: 1; }
    }

    .smart-trigger-indicator {
      animation: pulse 2s infinite;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <div class="row" style="justify-content: space-between; align-items: center;">
        <h1 style="margin: 0;">邮件账户管理</h1>
        <div class="row" style="align-items: center; gap: 12px;">
          <!-- 监控状态指示��� -->
          <div class="monitor-status">
            <span class="status-indicator" id="connectionStatus">连接中...</span>
            <span class="status-text" id="monitorStats">监控启动中...</span>
          </div>

          <!-- 智能触发状态指示器 -->
          <div class="monitor-status" id="smartTriggerStatus" style="display: none;">
            <span class="status-indicator smart-trigger-indicator" style="background: #ff9500; animation: pulse 2s infinite;"></span>
            <span class="status-text" id="smartTriggerText">智能监控中...</span>
            <button class="btn" onclick="smartTrigger.stop()" title="停止智能触发" style="padding: 4px 8px; font-size: 12px; margin-left: 8px; background: #dc3545; color: white; border: none;">
              停止
            </button>
          </div>

          <!-- 监控控制按钮 -->
          <button class="btn" onclick="emailMonitor.toggleSound()" title="切换提示音">
            🔔
          </button>
          <button class="btn" onclick="manualCheck()" title="手动检查邮件">
            🔄
          </button>
          <button class="btn" onclick="toggleSettings()" title="监控设置">
            ⚙️
          </button>
        </div>
      </div>
      <div class="row">
        <input type="text" id="searchInput" value="<%= q || '' %>" placeholder="搜索邮箱..." style="flex: 1; padding: 8px;">
        <button class="btn primary" onclick="handleSearch()">搜索</button>
        <a href="/import" class="btn" style="background: var(--primary-color, #007bff); color: white; border: none; text-decoration: none; height: 36px; display: inline-flex; align-items: center; justify-content: center;">导入账户</a>
      </div>
    </div>

    <div class="card">
      <table>
        <thead>
          <tr>
            <th>
              <input type="checkbox" id="selectAll" onchange="toggleAll(this)">
            </th>
            <th onclick="sortBy('email')">邮箱</th>
            <th onclick="sortBy('status')">状态</th>
            <th onclick="sortBy('last_active_at')">活跃时间</th>
            <th>操作</th>
          </tr>
        </thead>
        <tbody>
          <% accounts.forEach(a => { %>
            <tr>
              <td>
                <input type="checkbox" class="rowchk"
                       data-email="<%= a.email %>"
                       data-code="<%= a.latestCode ? a.latestCode.code : '' %>">
              </td>
              <td>
                <div>
                  <strong
                    style="cursor: pointer; color: #007bff; transition: color 0.2s;"
                    onclick="copyText('<%= a.email %>')"
                    title="点击复制邮箱地址"
                    onmouseover="this.style.color='#0056b3'"
                    onmouseout="this.style.color='#007bff'">
                    <%= a.email %>
                  </strong>
                </div>
                <div class="muted">ClientID: <%= a.client_id %></div>
                <% if (a.latestCode) { %>
                  <div style="margin-top: 4px;">
                    <div style="display: flex; align-items: center; gap: 6px; flex-wrap: wrap;">
                      <span style="color: #666; font-size: 12px;">验证码:</span>
                      <span
                        style="color: #28a745; font-weight: bold; cursor: pointer; padding: 2px 6px; border-radius: 4px; transition: background-color 0.2s; background: rgba(40, 167, 69, 0.05);"
                        onclick="copyText('<%= a.latestCode.code %>')"
                        title="点击复制验证码"
                        onmouseover="this.style.backgroundColor='rgba(40, 167, 69, 0.1)'"
                        onmouseout="this.style.backgroundColor='rgba(40, 167, 69, 0.05)'">
                        <%= a.latestCode.code %>
                      </span>
                      <span style="color: #999; font-size: 11px;">
                        (<%= new Date(a.latestCode.received_at).toLocaleString() %>)
                      </span>
                    </div>
                  </div>
                <% } %>
              </td>
              <td>
                <span class="pill status-<%= a.status %>">
                  <%= a.status === 'authorized' ? '已授权' : '待授权' %>
                </span>
              </td>
              <td>
                <%= a.last_active_at ? new Date(a.last_active_at).toLocaleString() : '—' %>
              </td>
              <td>
                <div class="row" style="gap: 4px; flex-wrap: wrap;">
                  <button class="btn primary" onclick="pickup('<%= a.id %>', this)">取件</button>
                  <button class="btn" onclick="copyText('<%= a.email %>')" title="复制邮箱">复制邮箱</button>
                  <% if (a.latestCode) { %>
                    <button class="btn" onclick="copyText('<%= a.latestCode.code %>')" title="复制验证码">复制验证码</button>
                  <% } %>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>

      <% if (accounts.length === 0) { %>
        <div style="text-align: center; padding: 40px;">
          <h3>暂无邮箱账户</h3>
          <p class="muted"><%= q ? '没有找到匹配的邮箱账户' : '请先导入邮箱账户' %></p>
          <% if (!q) { %>
            <a href="/import" class="btn primary">立即导入</a>
          <% } %>
        </div>
      <% } %>
    </div>

    <% if (accounts.length > 0) { %>
    <div class="card">
      <div class="row">
        <button class="btn" onclick="bulkCopy('email')">复制选中邮箱</button>
        <button class="btn" onclick="bulkCopy('code')">复制选中验证码</button>
        <span class="muted" style="margin-left: auto;">共 <%= accounts.length %> 个账户</span>
      </div>
    </div>
    <% } %>
  </div>

  <div id="notification" class="notification"></div>

  <!-- 监控设置面板 -->
  <div id="settingsPanel" class="settings-panel" style="display: none;">
    <div class="settings-content">
      <div class="settings-header">
        <h3>监控设置</h3>
        <button class="btn" onclick="toggleSettings()" style="background: none; color: inherit; font-size: 20px;">×</button>
      </div>

      <div class="settings-body">
        <div class="setting-group">
          <label>检查间隔</label>
          <select id="checkInterval" onchange="updateCheckInterval()">
            <option value="5000">5秒</option>
            <option value="10000">10秒</option>
            <option value="30000">30秒</option>
            <option value="60000">1分钟</option>
            <option value="300000">5分钟</option>
          </select>
        </div>

        <div class="setting-group">
          <label>声音提醒</label>
          <div class="toggle-switch">
            <input type="checkbox" id="soundEnabled" onchange="updateSoundSetting()">
            <span class="slider"></span>
          </div>
        </div>

        <div class="setting-group">
          <label>浏览器通知</label>
          <div class="toggle-switch">
            <input type="checkbox" id="browserNotification" onchange="updateBrowserNotification()">
            <span class="slider"></span>
          </div>
        </div>

        <div class="setting-group">
          <label>自动刷新</label>
          <div class="toggle-switch">
            <input type="checkbox" id="autoRefresh" onchange="updateAutoRefresh()">
            <span class="slider"></span>
          </div>
        </div>

        <div class="setting-group">
          <label>智能触发设置</label>
          <div style="margin-top: 10px;">
            <div style="margin-bottom: 10px;">
              <label style="font-size: 12px; color: var(--text-secondary);">触发持续时间</label>
              <select id="triggerDuration" onchange="updateTriggerSettings()" style="width: 100%; padding: 6px; border: 1px solid var(--border-light); border-radius: 6px; background: var(--bg-primary); color: var(--text-primary);">
                <option value="30000">30秒</option>
                <option value="60000" selected>1分钟</option>
                <option value="120000">2分钟</option>
                <option value="300000">5分钟</option>
                <option value="600000">10分钟</option>
              </select>
            </div>
            <div style="margin-bottom: 10px;">
              <label style="font-size: 12px; color: var(--text-secondary);">检查间隔</label>
              <select id="triggerInterval" onchange="updateTriggerSettings()" style="width: 100%; padding: 6px; border: 1px solid var(--border-light); border-radius: 6px; background: var(--bg-primary); color: var(--text-primary);">
                <option value="3000">3秒</option>
                <option value="5000" selected>5秒</option>
                <option value="10000">10秒</option>
                <option value="15000">15秒</option>
                <option value="30000">30秒</option>
              </select>
            </div>
            <div>
              <div class="toggle-switch" style="display: inline-block; margin-right: 10px;">
                <input type="checkbox" id="autoStopOnNewCode" checked onchange="updateTriggerSettings()">
                <span class="slider"></span>
              </div>
              <label style="font-size: 12px; color: var(--text-secondary);">收到新验证码时自动停止</label>
            </div>
          </div>
        </div>
      </div>

      <div class="settings-footer">
        <button class="btn" onclick="resetSettings()">重置默认</button>
        <button class="btn primary" onclick="saveSettings()">保存设置</button>
      </div>
    </div>
  </div>

  <script>
    // 实时邮件监控系统
    class EmailMonitor {
      constructor() {
        this.eventSource = null;
        this.isConnected = false;
        this.newCodesQueue = [];
        this.soundEnabled = true;
        this.initialize();
      }

      initialize() {
        this.connectSSE();
        this.setupNotificationSound();
        this.loadPreferences();
      }

      // 连接SSE
      connectSSE() {
        try {
          this.eventSource = new EventSource('/events');

          this.eventSource.onopen = () => {
            console.log('[EmailMonitor] SSE连接已建立');
            this.isConnected = true;
            this.updateConnectionStatus('已连接');
          };

          this.eventSource.onmessage = (event) => {
            const data = JSON.parse(event.data);
            this.handleEvent(data);
          };

          this.eventSource.onerror = (error) => {
            console.error('[EmailMonitor] SSE连接错误:', error);
            this.isConnected = false;
            this.updateConnectionStatus('连接断开');

            // 5秒后尝试重连
            setTimeout(() => {
              this.connectSSE();
            }, 5000);
          };

        } catch (error) {
          console.error('[EmailMonitor] SSE初始化失败:', error);
          this.updateConnectionStatus('初始化失败');
        }
      }

      // 处理实时事件
      handleEvent(data) {
        console.log('[EmailMonitor] 收到事件:', data);

        switch (data.type) {
          case 'connected':
            showNotification('邮件监控已连接', 'success');
            break;

          case 'new_codes_detected':
            this.handleNewCodes(data);
            break;

          case 'error':
            showNotification('监控出错: ' + data.error, 'error');
            break;

          case 'heartbeat':
            // 心跳事件，用于保持连接活跃
            break;
        }
      }

      // 处理新验证码
      handleNewCodes(data) {
        const { count, message } = data;

        // 显示通知
        showNotification(`🎉 发现 ${count} 个新验证码！`, 'success');

        // 播放提示音
        if (this.soundEnabled) {
          this.playNotificationSound();
        }

        // 更新UI
        this.highlightNewCodes();
        this.updateStats();

        // 发送浏览器通知
        this.sendBrowserNotification(message);
      }

      // 突出显示新验证码
      highlightNewCodes() {
        // 添加视觉动画效果
        const table = document.querySelector('table');
        if (table) {
          table.classList.add('new-codes-detected');
          setTimeout(() => {
            table.classList.remove('new-codes-detected');
          }, 3000);
        }

        // 刷新页面数据以显示新验证码
        setTimeout(() => {
          location.reload();
        }, 1000);
      }

      // 更新连接状态显示
      updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        if (statusElement) {
          statusElement.textContent = status;
          statusElement.className = `status-indicator ${this.isConnected ? 'connected' : 'disconnected'}`;
        }
      }

      // 设置通知��效
      setupNotificationSound() {
        // 创建音频上下文
        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      }

      // 播放提示音
      playNotificationSound() {
        try {
          // 创建简单的提示音
          const oscillator = this.audioContext.createOscillator();
          const gainNode = this.audioContext.createGain();

          oscillator.connect(gainNode);
          gainNode.connect(this.audioContext.destination);

          oscillator.frequency.setValueAtTime(800, this.audioContext.currentTime);
          oscillator.frequency.setValueAtTime(1000, this.audioContext.currentTime + 0.1);

          gainNode.gain.setValueAtTime(0.3, this.audioContext.currentTime);
          gainNode.gain.exponentialRampToValueAtTime(0.01, this.audioContext.currentTime + 0.2);

          oscillator.start(this.audioContext.currentTime);
          oscillator.stop(this.audioContext.currentTime + 0.3);
        } catch (error) {
          console.error('[EmailMonitor] 播放提示音失败:', error);
        }
      }

      // 发送浏览器通知
      sendBrowserNotification(message) {
        if (!('Notification' in window)) return;

        if (Notification.permission === 'granted') {
          new Notification('邮件管理器', {
            body: message,
            icon: '/favicon.ico',
            tag: 'new-codes',
            requireInteraction: false
          });
        } else if (Notification.permission !== 'denied') {
          Notification.requestPermission().then(permission => {
            if (permission === 'granted') {
              new Notification('邮件管理器', {
                body: message,
                icon: '/favicon.ico'
              });
            }
          });
        }
      }

      // 加载用户偏好
      loadPreferences() {
        const prefs = localStorage.getItem('emailMonitorPrefs');
        if (prefs) {
          try {
            const preferences = JSON.parse(prefs);
            this.soundEnabled = preferences.soundEnabled !== false;
          } catch (error) {
            console.error('[EmailMonitor] 加载偏好设置失败:', error);
          }
        }
      }

      // 保存用户偏好
      savePreferences() {
        const preferences = {
          soundEnabled: this.soundEnabled
        };
        localStorage.setItem('emailMonitorPrefs', JSON.stringify(preferences));
      }

      // 更新统计信息
      updateStats() {
        const statsElement = document.getElementById('monitorStats');
        if (statsElement) {
          // 这里可以显示监控统计信息
          statsElement.textContent = '监控中...';
        }
      }

      // 切换声音设置
      toggleSound() {
        this.soundEnabled = !this.soundEnabled;
        this.savePreferences();
        showNotification(
          this.soundEnabled ? '提示音已开启' : '提示音已关闭',
          'info'
        );
      }
    }

    // 智能触发监控系统
    class SmartTriggerMonitor {
      constructor() {
        this.isTriggering = false;
        this.triggerTimer = null;
        this.checkInterval = null;
        this.currentEmail = null;
        this.triggerDuration = 60000; // 默认1分钟
        this.checkIntervalTime = 5000; // 默认5秒检查间隔
        this.lastCodeCount = 0;
        this.settings = this.loadSettings();
      }

      // 加载用户设置
      loadSettings() {
        const saved = localStorage.getItem('smartTriggerSettings');
        return saved ? JSON.parse(saved) : {
          triggerDuration: 60000,
          checkIntervalTime: 5000,
          autoStopOnNewCode: true
        };
      }

      // 保存用户设置
      saveSettings() {
        localStorage.setItem('smartTriggerSettings', JSON.stringify(this.settings));
        this.triggerDuration = this.settings.triggerDuration;
        this.checkIntervalTime = this.settings.checkIntervalTime;
      }

      // 从邮箱复制开始持续触发
      startContinuousTriggerFromEmail(email) {
        if (this.isTriggering) {
          console.log('[SmartTrigger] 触发已在进行中，跳过重复触发');
          return;
        }

        this.currentEmail = email;
        this.isTriggering = true;
        this.lastCodeCount = this.getCurrentCodeCount();

        console.log(`[SmartTrigger] 开始监控邮箱: ${email}`);
        showNotification(`开始监控 ${email} 的新邮件`, 'info');

        // 显示状态指示器
        this.showStatusIndicator(`监控邮箱: ${email}`);

        // 启动定时检查
        this.startPeriodicCheck();

        // 设置触发超时
        this.triggerTimer = setTimeout(() => {
          this.stopTrigger('监控时间已结束');
        }, this.triggerDuration);
      }

      // 从收件按钮开始触发
      startTriggerFromPickup(accountId) {
        if (this.isTriggering) {
          console.log('[SmartTrigger] 触发已在进行中，跳过重复触发');
          return;
        }

        this.isTriggering = true;
        this.lastCodeCount = this.getCurrentCodeCount();
        this.currentAccountId = accountId;

        console.log(`[SmartTrigger] 开始监控账户: ${accountId}`);
        showNotification('开始监控新验证码', 'info');

        // 显示状态指示器
        this.showStatusIndicator('监控新验证码');

        // 启动定时检查
        this.startPeriodicCheck();

        // 设置触发超时
        this.triggerTimer = setTimeout(() => {
          this.stopTrigger('监控时间已结束');
        }, this.triggerDuration);
      }

      // 启动定期检查
      startPeriodicCheck() {
        // 清除可能存在的定时器
        if (this.checkInterval) {
          clearInterval(this.checkInterval);
        }

        // 立即执行一次检查
        this.performCheck();

        // 设置定期检查
        this.checkInterval = setInterval(() => {
          this.performCheck();
        }, this.checkIntervalTime);
      }

      // 执行检查
      async performCheck() {
        try {
          let response;

          if (this.currentEmail) {
            // 基于邮箱的检查
            response = await fetch(`/api/check-email-now?email=${encodeURIComponent(this.currentEmail)}`, {
              method: 'POST'
            });
          } else if (this.currentAccountId) {
            // 基于账户ID的检查
            response = await fetch(`/accounts/${this.currentAccountId}/check-now`, {
              method: 'POST'
            });
          }

          if (response && response.ok) {
            const result = await response.json();
            console.log('[SmartTrigger] 检查结果:', result);

            // 检查是否有新的验证码
            if (this.settings.autoStopOnNewCode && this.checkForNewCodes()) {
              this.stopTrigger('检测到新验证码');
              // 刷新页面以显示新验证码
              setTimeout(() => location.reload(), 1000);
              return;
          }

            if (result.newMessages) {
              showNotification(`发现 ${result.newMessages} 封新邮件`, 'success');
            }
          }
        } catch (error) {
          console.error('[SmartTrigger] 检查失败:', error);
        }
      }

      // 检查是否有新的验证码
      checkForNewCodes() {
        const currentCount = this.getCurrentCodeCount();
        if (currentCount > this.lastCodeCount) {
          console.log(`[SmartTrigger] 发现新验证码: ${this.lastCodeCount} → ${currentCount}`);
          return true;
        }
        return false;
      }

      // 获取当前验证码数量
      getCurrentCodeCount() {
        const codeElements = document.querySelectorAll('[data-code]');
        let count = 0;
        codeElements.forEach(element => {
          const code = element.getAttribute('data-code');
          if (code && /^\d+$/.test(code)) {
            count++;
          }
        });
        return count;
      }

      // 停止触发
      stopTrigger(reason = '手动停止') {
        if (!this.isTriggering) {
          return;
        }

        console.log(`[SmartTrigger] 停止触发: ${reason}`);

        this.isTriggering = false;
        this.currentEmail = null;
        this.currentAccountId = null;

        // 清除定时器
        if (this.triggerTimer) {
          clearTimeout(this.triggerTimer);
          this.triggerTimer = null;
        }

        if (this.checkInterval) {
          clearInterval(this.checkInterval);
          this.checkInterval = null;
        }

        // 隐藏状态指示器
        this.hideStatusIndicator();

        showNotification(`监控已停止: ${reason}`, 'info');
      }

      // 显示状态指示器
      showStatusIndicator(text) {
        const statusEl = document.getElementById('smartTriggerStatus');
        const textEl = document.getElementById('smartTriggerText');
        if (statusEl && textEl) {
          textEl.textContent = text;
          statusEl.style.display = 'flex';
        }
      }

      // 隐藏状态指示器
      hideStatusIndicator() {
        const statusEl = document.getElementById('smartTriggerStatus');
        if (statusEl) {
          statusEl.style.display = 'none';
        }
      }

      // 手动停止
      stop() {
        this.stopTrigger('用户手动停止');
      }

      // 更新设置
      updateSettings(newSettings) {
        this.settings = { ...this.settings, ...newSettings };
        this.saveSettings();
        showNotification('触发设置已保存', 'success');
      }

      // 获取当前状态
      getStatus() {
        return {
          isTriggering: this.isTriggering,
          currentEmail: this.currentEmail,
          currentAccountId: this.currentAccountId,
          remainingTime: this.triggerTimer ? this.triggerDuration - (Date.now() - this.startTime) : 0,
          settings: this.settings
        };
      }
    }

    // 全局实例
    const emailMonitor = new EmailMonitor();
    const smartTrigger = new SmartTriggerMonitor();

    function showNotification(message, type = 'success') {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.className = `notification ${type} show`;

      setTimeout(() => {
        notification.classList.remove('show');
      }, 3000);
    }

    function copyText(text) {
      navigator.clipboard.writeText(text).then(() => {
        showNotification('已复制到剪贴板');

        // 如果复制的是邮箱，触发持续监控
        if (text && text.includes('@')) {
          smartTrigger.startContinuousTriggerFromEmail(text);
        }
      }).catch(() => {
        showNotification('复制失败', 'error');
      });
    }

    function pickup(id, btn) {
      btn.disabled = true;
      btn.textContent = '取件中...';

      fetch(`/accounts/${id}/pickup`, { method: 'POST' })
        .then(r => r.json())
        .then(j => {
          if (j.ok) {
            showNotification('取件成功');

            // 启动智能触发监控
            smartTrigger.startTriggerFromPickup(id);

            setTimeout(() => location.reload(), 1500);
          } else {
            showNotification('取件失败: ' + (j.message || '未知错误'), 'error');
          }
        })
        .catch(e => {
          showNotification('网络错误', 'error');
        })
        .finally(() => {
          btn.disabled = false;
          btn.textContent = '取件';
        });
    }

    function sortBy(field) {
      const currentSort = '<%= sort %>';
      const currentOrder = '<%= order %>';
      const newOrder = (currentSort === field && currentOrder === 'asc') ? 'desc' : 'asc';

      window.location.href = `/?sort=${field}&order=${newOrder}&q=<%= q %>`;
    }

    function handleSearch() {
      const query = document.getElementById('searchInput').value;
      window.location.href = `/?q=${encodeURIComponent(query)}`;
    }

    function toggleAll(checkbox) {
      document.querySelectorAll('.rowchk').forEach(cb => cb.checked = checkbox.checked);
    }

    function bulkCopy(field) {
      const selected = document.querySelectorAll('.rowchk:checked');
      const values = Array.from(selected).map(cb => cb.dataset[field]).filter(Boolean);

      if (values.length === 0) {
        showNotification('请选择要复制的内容', 'error');
        return;
      }

      copyText(values.join('\n'));
    }

    // 手动检查邮件
    function manualCheck() {
      const btn = event.target;
      const originalText = btn.innerHTML;

      btn.disabled = true;
      btn.innerHTML = '🔄 检查中...';

      fetch('/api/monitor/check', { method: 'POST' })
        .then(r => r.json())
        .then(data => {
          if (data.ok) {
            showNotification(`邮件检查完成，发现 ${data.newCodesCount || 0} 个新验证码`, 'success');
            if (data.newCodesCount > 0) {
              setTimeout(() => location.reload(), 1500);
            }
          } else {
            showNotification('检查失败: ' + (data.message || '未知错误'), 'error');
          }
        })
        .catch(e => {
          console.error('Manual check error:', e);
          showNotification('网络错误', 'error');
        })
        .finally(() => {
          btn.disabled = false;
          btn.innerHTML = originalText;
        });
    }

    // 设置面板功能
  function toggleSettings() {
    const panel = document.getElementById('settingsPanel');
    if (panel.style.display === 'none') {
      loadSettings();
      panel.style.display = 'flex';
    } else {
      panel.style.display = 'none';
    }
  }

  function loadSettings() {
    const settings = JSON.parse(localStorage.getItem('monitorSettings') || '{}');

    // 设置检查间隔
    document.getElementById('checkInterval').value = settings.checkInterval || '5000';

    // 设置声音开关
    document.getElementById('soundEnabled').checked = settings.soundEnabled !== false;

    // 设置浏览器通知
    document.getElementById('browserNotification').checked = settings.browserNotification !== false;

    // 设置自动刷新
    document.getElementById('autoRefresh').checked = settings.autoRefresh !== false;
  }

  function saveSettings() {
    const settings = {
      checkInterval: document.getElementById('checkInterval').value,
      soundEnabled: document.getElementById('soundEnabled').checked,
      browserNotification: document.getElementById('browserNotification').checked,
      autoRefresh: document.getElementById('autoRefresh').checked
    };

    localStorage.setItem('monitorSettings', JSON.stringify(settings));

    // 应用设置
    applySettings(settings);

    showNotification('设置已保存', 'success');
    toggleSettings();
  }

  function applySettings(settings) {
    // 更新检查间隔
    if (settings.checkInterval) {
      fetch('/api/monitor/interval', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ interval: parseInt(settings.checkInterval) })
      });
    }

    // 更新声音设置
    if (typeof emailMonitor !== 'undefined') {
      emailMonitor.soundEnabled = settings.soundEnabled !== false;
    }

    // 请求浏览器通知权限
    if (settings.browserNotification && 'Notification' in window) {
      if (Notification.permission === 'default') {
        Notification.requestPermission();
      }
    }
  }

  function resetSettings() {
    localStorage.removeItem('monitorSettings');
    loadSettings();
    showNotification('设置已重置', 'info');
  }

  function updateCheckInterval() {
    const interval = document.getElementById('checkInterval').value;
    fetch('/api/monitor/interval', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ interval: parseInt(interval) })
    }).then(() => {
      showNotification('检查间隔已更新', 'success');
    });
  }

  function updateSoundSetting() {
    const enabled = document.getElementById('soundEnabled').checked;
    if (typeof emailMonitor !== 'undefined') {
      emailMonitor.soundEnabled = enabled;
    }

    const settings = JSON.parse(localStorage.getItem('monitorSettings') || '{}');
    settings.soundEnabled = enabled;
    localStorage.setItem('monitorSettings', JSON.stringify(settings));
  }

  function updateBrowserNotification() {
    const enabled = document.getElementById('browserNotification').checked;
    if (enabled && 'Notification' in window) {
      if (Notification.permission === 'default') {
        Notification.requestPermission().then(permission => {
          if (permission === 'granted') {
            showNotification('浏览器通知已开启', 'success');
          } else {
            showNotification('浏览器通知权限被拒绝', 'error');
            document.getElementById('browserNotification').checked = false;
          }
        });
      }
    }

    const settings = JSON.parse(localStorage.getItem('monitorSettings') || '{}');
    settings.browserNotification = enabled;
    localStorage.setItem('monitorSettings', JSON.stringify(settings));
  }

  function updateAutoRefresh() {
    const enabled = document.getElementById('autoRefresh').checked;
    const settings = JSON.parse(localStorage.getItem('monitorSettings') || '{}');
    settings.autoRefresh = enabled;
    localStorage.setItem('monitorSettings', JSON.stringify(settings));

    showNotification(`自动刷新已${enabled ? '开启' : '关闭'}`, 'info');
  }

  function updateTriggerSettings() {
    const duration = parseInt(document.getElementById('triggerDuration').value);
    const interval = parseInt(document.getElementById('triggerInterval').value);
    const autoStop = document.getElementById('autoStopOnNewCode').checked;

    if (typeof smartTrigger !== 'undefined') {
      smartTrigger.updateSettings({
        triggerDuration: duration,
        checkIntervalTime: interval,
        autoStopOnNewCode: autoStop
      });
    }

    showNotification('触发设置已更新', 'info');
  }

  // 回车搜索
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        handleSearch();
      }
    });
  </script>
</body>
</html>