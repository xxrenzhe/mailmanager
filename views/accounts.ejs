<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MailManager - 简化管理界面</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .status-pending { color: #F59E0B; }
        .status-authorized { color: #10B981; }
        .status-error { color: #EF4444; }
        .monitoring { animation: pulse 2s infinite; }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .code-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 0.9em;
        }
        .simple-pagination {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        .page-btn {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            background: white;
            color: #374151;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .page-btn:hover {
            background: #f3f4f6;
        }
        .page-btn.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }
        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .search-filter {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            width: 200px;
        }
        .stats-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
        }
        .stat-item {
            text-align: center;
        }
        .stat-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #1f2937;
        }
        .stat-label {
            color: #6b7280;
            font-size: 0.9em;
        }
        /* 表格列宽优化 */
        .table-container {
            overflow-x: auto;
        }
        .accounts-table {
            min-width: 1200px;
        }
        .col-status { width: 100px; }
        .col-email { width: 250px; }
        .col-sender { width: 180px; }
        .col-code { width: 120px; min-width: 120px; }
        .col-time { width: 150px; }
        .col-active { width: 150px; }
        .col-actions { width: 150px; }
        /* 可排序表头样式 */
        .sortable {
            cursor: pointer;
            user-select: none;
            position: relative;
            padding-right: 20px !important;
        }
        .sortable:hover {
            background-color: #f9fafb;
        }
        .sort-indicator::after {
            content: '⇅';
            position: absolute;
            right: 8px;
            opacity: 0.5;
            transition: opacity 0.2s;
        }
        .sort-indicator.sort-asc::after {
            content: '↑';
            opacity: 1;
        }
        .sort-indicator.sort-desc::after {
            content: '↓';
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-6 max-w-7xl">
        <!-- 头部 -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">
                        <i class="fas fa-envelope mr-2"></i>MailManager
                    </h1>
                    <p class="text-gray-600 mt-1">简单高效的邮箱验证码管理</p>
                </div>
                <div class="flex gap-3">
                    <button onclick="addAccount()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition">
                        <i class="fas fa-plus mr-1"></i>添加账户
                    </button>
                    <button onclick="refreshData()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition">
                        <i class="fas fa-sync-alt mr-1"></i>刷新
                    </button>
                </div>
            </div>
        </div>

        <!-- 统计信息 -->
        <div class="stats-row">
            <div class="stat-item">
                <div class="stat-number" id="totalAccounts">0</div>
                <div class="stat-label">总账户数</div>
            </div>
            <div class="stat-item">
                <div class="stat-number text-green-600" id="activeCount">0</div>
                <div class="stat-label">活跃状态</div>
            </div>
              </div>
            <div class="stat-item">
                <div class="stat-number text-yellow-600" id="pendingCount">0</div>
                <div class="stat-label">待授权</div>
            </div>
            <div class="stat-item">
                <div class="stat-number text-purple-600" id="monitoringCount">0</div>
                <div class="stat-label">监控中</div>
            </div>
        </div>

        <!-- 搜索和过滤 -->
        <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
            <div class="flex gap-4 items-center flex-wrap">
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">搜索:</label>
                    <input type="text" id="searchInput" placeholder="邮箱地址"
                           class="search-filter" onkeyup="filterAccounts()">
                </div>
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">状态:</label>
                    <select id="statusFilter" class="search-filter" onchange="filterAccounts()">
                        <option value="">全部</option>
                        <option value="pending">待授权</option>
                        <option value="authorized">已授权</option>
                        <option value="error">错误</option>
                    </select>
                </div>
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">每页显示:</label>
                    <select id="pageSize" class="search-filter" onchange="changePageSize()">
                        <option value="20">20</option>
                        <option value="50" selected>50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- 账户列表 -->
        <div class="bg-white rounded-lg shadow-sm">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50 border-b">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider col-email sortable" onclick="sortTable('email')">
                                邮箱地址
                                <span class="sort-indicator"></span>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider col-status sortable" onclick="sortTable('status')">
                                状态
                                <span class="sort-indicator"></span>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider col-code">最新验证码</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider col-time sortable" onclick="sortTable('latest_code_received_at')">
                                收到时间
                                <span class="sort-indicator"></span>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider col-time sortable" onclick="sortTable('last_active_at')">
                                最后活跃
                                <span class="sort-indicator"></span>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                        </tr>
                    </thead>
                    <tbody id="accountsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- 账户数据将在这里加载 -->
                    </tbody>
                </table>
            </div>

            <!-- 分页控制 -->
            <div class="px-6 py-4 border-t bg-gray-50">
                <div class="flex justify-between items-center">
                    <div class="text-sm text-gray-700">
                        显示 <span id="showingFrom">0</span> - <span id="showingTo">0</span>
                        共 <span id="totalRecords">0</span> 条记录
                    </div>
                    <div class="simple-pagination" id="pagination">
                        <!-- 分页按钮将在这里生成 -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 全局状态
        let currentPage = 1;
        let pageSize = 50;
        let totalRecords = 0;
        let accounts = [];
        let filteredAccounts = [];
        let monitoringAccounts = new Set();
        let sortColumn = '';
        let sortDirection = 'asc';

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            loadAccounts();
            setupEventSource();
        });

        // 加载账户数据
        async function loadAccounts() {
            try {
                const searchQuery = encodeURIComponent(document.getElementById('searchInput').value);
                const statusFilter = document.getElementById('statusFilter').value;
                const sortParams = sortColumn ? `&sortBy=${sortColumn}&order=${sortDirection}` : '';

                const response = await fetch(`/api/accounts/paged?page=${currentPage}&size=${pageSize}&search=${searchQuery}&status=${statusFilter}${sortParams}`);
                const data = await response.json();

                accounts = data.accounts;
                totalRecords = data.total;
                filteredAccounts = accounts;

                updateStats();
                renderTable();
                renderPagination();
                updateSortIndicators();
            } catch (error) {
                console.error('加载账户失败:', error);
                showError('加载数据失败');
            }
        }

        // 更新统计信息
        function updateStats() {
            document.getElementById('totalAccounts').textContent = totalRecords;
            document.getElementById('activeCount').textContent = accounts.filter(a => a.status === 'authorized').length;
            document.getElementById('pendingCount').textContent = accounts.filter(a => a.status === 'pending').length;
            document.getElementById('monitoringCount').textContent = monitoringAccounts.size;
        }

        // 渲染表格
        function renderTable() {
            const tbody = document.getElementById('accountsTableBody');
            tbody.innerHTML = '';

            filteredAccounts.forEach(account => {
                const row = createAccountRow(account);
                tbody.appendChild(row);
            });

            // 更新显示信息
            const from = (currentPage - 1) * pageSize + 1;
            const to = Math.min(currentPage * pageSize, totalRecords);
            document.getElementById('showingFrom').textContent = from;
            document.getElementById('showingTo').textContent = to;
            document.getElementById('totalRecords').textContent = totalRecords;
        }

        // 创建账户行
        function createAccountRow(account) {
            const tr = document.createElement('tr');
            tr.className = 'hover:bg-gray-50 transition-colors';
            tr.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                        <i class="fas fa-envelope text-gray-400 mr-3"></i>
                        <span class="text-sm font-medium text-gray-900">${account.email}</span>
                        ${monitoringAccounts.has(account.id) ? '<i class="fas fa-circle text-blue-500 text-xs ml-2 monitoring"></i>' : ''}
                    </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    <span class="status-${account.status}">
                        <i class="fas ${getStatusIcon(account.status)} mr-1"></i>
                        ${getStatusText(account.status)}
                    </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                    ${account.latest_code ?
                        `<span class="code-badge cursor-pointer" onclick="copyCode('${account.latest_code}')" title="点击复制">
                            ${account.latest_code}
                            <i class="fas fa-copy ml-1 text-xs"></i>
                        </span>` :
                        '<span class="text-gray-400 text-sm">无</span>'
                    }
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${account.latest_code_received_at ?
                        formatTime(account.latest_code_received_at) :
                        '-'
                    }
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ${formatTime(account.last_active_at)}
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <div class="flex gap-2">
                        ${account.status === 'authorized' ?
                            `<button onclick="copyEmail('${account.email}')"
                                    class="text-blue-600 hover:text-blue-800 transition"
                                    title="复制邮箱">
                                <i class="fas fa-copy"></i>
                            </button>
                            <button onclick="startMonitoring(${account.id})"
                                    class="text-green-600 hover:text-green-800 transition"
                                    title="开始监控">
                                <i class="fas fa-play"></i>
                            </button>` : ''
                        }
                        ${monitoringAccounts.has(account.id) ?
                            `<button onclick="stopMonitoring(${account.id})"
                                    class="text-red-600 hover:text-red-800 transition"
                                    title="停止监控">
                                <i class="fas fa-stop"></i>
                            </button>` : ''
                        }
                        <button onclick="deleteAccount(${account.id})"
                                class="text-red-600 hover:text-red-800 transition"
                                title="删除账户">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            return tr;
        }

        // 渲染分页
        function renderPagination() {
            const pagination = document.getElementById('pagination');
            const totalPages = Math.ceil(totalRecords / pageSize);

            let html = '';

            // 上一页
            html += `<button class="page-btn" onclick="goToPage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
                <i class="fas fa-chevron-left"></i>
            </button>`;

            // 页码
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                html += `<button class="page-btn" onclick="goToPage(1)">1</button>`;
                if (startPage > 2) html += `<span>...</span>`;
            }

            for (let i = startPage; i <= endPage; i++) {
                html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">${i}</button>`;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) html += `<span>...</span>`;
                html += `<button class="page-btn" onclick="goToPage(${totalPages})">${totalPages}</button>`;
            }

            // 下一页
            html += `<button class="page-btn" onclick="goToPage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
                <i class="fas fa-chevron-right"></i>
            </button>`;

            pagination.innerHTML = html;
        }

        // 页面跳转
        function goToPage(page) {
            const totalPages = Math.ceil(totalRecords / pageSize);
            if (page < 1 || page > totalPages) return;

            currentPage = page;
            loadAccounts();
        }

        // 修改页面大小
        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1;
            loadAccounts();
        }

        // 过滤账户
        function filterAccounts() {
            currentPage = 1;
            loadAccounts();
        }

        // 排序功能
        function sortTable(column) {
            // 如果点击同一列，切换排序方向
            if (sortColumn === column) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                sortColumn = column;
                sortDirection = 'asc';
            }

            // 更新排序指示器
            updateSortIndicators();

            // 重新加载数据
            currentPage = 1;
            loadAccounts();
        }

        // 更新排序指示器
        function updateSortIndicators() {
            // 移除所有排序指示器
            document.querySelectorAll('.sort-indicator').forEach(indicator => {
                indicator.className = 'sort-indicator';
            });

            // 添加当前排序指示器
            if (sortColumn) {
                const header = document.querySelector(`th[onclick="sortTable('${sortColumn}')"] .sort-indicator`);
                if (header) {
                    header.className = `sort-indicator ${sortDirection === 'asc' ? 'sort-asc' : 'sort-desc'}`;
                }
            }
        }

        // 复制邮箱
        async function copyEmail(email) {
            try {
                await navigator.clipboard.writeText(email);
                showSuccess('邮箱已复制: ' + email);

                // 自动开始监控
                const account = accounts.find(a => a.email === email);
                if (account && account.status === 'authorized') {
                    startMonitoring(account.id);
                }
            } catch (error) {
                console.error('复制失败:', error);
                showError('复制失败');
            }
        }

        // 复制验证码
        async function copyCode(code) {
            try {
                await navigator.clipboard.writeText(code);
                showSuccess('验证码已复制: ' + code);
            } catch (error) {
                console.error('复制失败:', error);
                showError('复制失败');
            }
        }

        // 开始监控
        async function startMonitoring(accountId) {
            try {
                const response = await fetch('/api/monitor/start', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ account_id: accountId })
                });

                if (response.ok) {
                    monitoringAccounts.add(accountId);
                    updateStats();
                    renderTable();
                    showSuccess('监控已启动');
                } else {
                    showError('启动监控失败');
                }
            } catch (error) {
                console.error('启动监控失败:', error);
                showError('启动监控失败');
            }
        }

        // 停止监控
        async function stopMonitoring(accountId) {
            try {
                const response = await fetch('/api/monitor/stop', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ account_id: accountId })
                });

                if (response.ok) {
                    monitoringAccounts.delete(accountId);
                    updateStats();
                    renderTable();
                    showSuccess('监控已停止');
                } else {
                    showError('停止监控失败');
                }
            } catch (error) {
                console.error('停止监控失败:', error);
                showError('停止监控失败');
            }
        }

        // 设置SSE连接
        function setupEventSource() {
            const eventSource = new EventSource('/api/events');

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === 'new_code') {
                    showSuccess(`收到新验证码: ${data.code}`);
                    loadAccounts(); // 刷新数据
                } else if (data.type === 'monitoring_status') {
                    if (data.status === 'started') {
                        monitoringAccounts.add(data.account_id);
                    } else {
                        monitoringAccounts.delete(data.account_id);
                    }
                    updateStats();
                    renderTable();
                }
            };

            eventSource.onerror = function(event) {
                console.error('SSE连接错误:', event);
                setTimeout(() => setupEventSource(), 5000); // 5秒后重连
            };
        }

        // 工具函数
        function getStatusIcon(status) {
            const icons = {
                'pending': 'fa-clock',
                'authorized': 'fa-check-circle',
                'error': 'fa-exclamation-circle'
            };
            return icons[status] || 'fa-question-circle';
        }

        function getStatusText(status) {
            const texts = {
                'pending': '待授权',
                'authorized': '已授权',
                'error': '错误'
            };
            return texts[status] || '未知';
        }

        function formatTime(timestamp) {
            if (!timestamp) return '-';
            const date = new Date(timestamp);
            const now = new Date();
            const diff = now - date;

            if (diff < 60000) return '刚刚';
            if (diff < 3600000) return Math.floor(diff / 60000) + '分钟前';
            if (diff < 86400000) return Math.floor(diff / 3600000) + '小时前';
            if (diff < 604800000) return Math.floor(diff / 86400000) + '天前';

            return date.toLocaleDateString('zh-CN');
        }

        function showSuccess(message) {
            showNotification(message, 'success');
        }

        function showError(message) {
            showNotification(message, 'error');
        }

        function showNotification(message, type) {
            // 简单的通知实现
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                document.body.removeChild(notification);
            }, 3000);
        }

        function refreshData() {
            loadAccounts();
        }

        function addAccount() {
            // 实现添加账户功能
            showSuccess('添加账户功能待实现');
        }

        function deleteAccount(accountId) {
            if (confirm('确定要删除这个账户吗？')) {
                // 实现删除账户功能
                showSuccess('删除账户功能待实现');
            }
        }
    </script>
</body>
</html>