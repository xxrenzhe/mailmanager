<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MailManager - 批量导入优化版</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .status-pending { color: #F59E0B; }
        .status-authorized { color: #10B981; }
        .status-error { color: #EF4444; }
        .monitoring { animation: pulse 2s infinite; }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .code-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 0.9em;
        }
        .progress-bar {
            background: #e5e7eb;
            border-radius: 8px;
            overflow: hidden;
            height: 20px;
        }
        .progress-fill {
            background: linear-gradient(90deg, #3b82f6, #10b981);
            height: 100%;
            transition: width 0.3s ease;
            border-radius: 8px;
        }
        .import-status {
            border-left: 4px solid #3b82f6;
            background: #f8fafc;
            padding: 16px;
            border-radius: 8px;
            margin-bottom: 16px;
        }
        .success-animation {
            animation: successPulse 0.6s ease;
        }
        @keyframes successPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .error-shake {
            animation: shake 0.5s ease;
        }
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        .format-preview {
            background: #f1f5f9;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            padding: 12px;
            font-family: monospace;
            font-size: 0.9em;
        }
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            background: #1f2937;
            color: white;
            padding: 8px;
            border-radius: 4px;
            font-size: 0.8em;
            white-space: nowrap;
            z-index: 1000;
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-8">
        <!-- 页面标题 -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">
                <i class="fas fa-envelope-bulk mr-3 text-blue-600"></i>
                MailManager - 批量导入优化版
            </h1>
            <p class="text-gray-600">支持大规模邮箱导入，智能批处理，异步授权验证</p>
        </div>

        <!-- 主要内容区域 -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- 左侧：导入区域 -->
            <div class="space-y-6">
                <!-- 导入卡片 -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-xl font-semibold mb-4 text-gray-800">
                        <i class="fas fa-upload mr-2 text-green-600"></i>
                        批量导入邮箱
                    </h2>

                    <!-- 格式说明 -->
                    <div class="mb-4">
                        <h3 class="text-sm font-medium text-gray-700 mb-2">数据格式：</h3>
                        <div class="format-preview">
                            邮箱地址----密码----客户端ID----授权码<br>
                            <span class="text-gray-500">或使用多个"-"分隔符</span>
                        </div>
                    </div>

                    <!-- 示例数据 -->
                    <div class="mb-4 p-3 bg-blue-50 rounded-lg">
                        <h4 class="text-sm font-medium text-blue-800 mb-1">
                            <i class="fas fa-info-circle mr-1"></i>
                            示例：
                        </h4>
                        <code class="text-xs text-blue-700">
                            user1@gmail.com----password123----abc123-client-id----refresh-token-xyz<br>
                            user2@gmail.com----password456----def456-client-id----refresh-token-def
                        </code>
                    </div>

                    <!-- 文本输入区 -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            邮箱数据：
                        </label>
                        <textarea
                            id="importData"
                            rows="10"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="请粘贴邮箱数据，每行一个账户..."></textarea>
                    </div>

                    <!-- 操作按钮 -->
                    <div class="flex gap-3">
                        <button
                            id="parseBtn"
                            class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition duration-200">
                            <i class="fas fa-eye mr-2"></i>
                            预览数据
                        </button>
                        <button
                            id="importBtn"
                            class="flex-1 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-200 disabled:bg-gray-400"
                            disabled>
                            <i class="fas fa-rocket mr-2"></i>
                            开始导入
                        </button>
                        <button
                            id="clearBtn"
                            class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition duration-200">
                            <i class="fas fa-trash mr-2"></i>
                            清空
                        </button>
                    </div>
                </div>

                <!-- 数据预览 -->
                <div id="previewSection" class="bg-white rounded-lg shadow-md p-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-gray-800">
                        <i class="fas fa-list-check mr-2 text-blue-600"></i>
                        数据预览
                    </h3>
                    <div id="previewContent" class="max-h-64 overflow-y-auto">
                        <!-- 预览内容将在这里动态生成 -->
                    </div>
                </div>
            </div>

            <!-- 右侧：状态监控 -->
            <div class="space-y-6">
                <!-- 导入状态 -->
                <div id="importStatus" class="bg-white rounded-lg shadow-md p-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-gray-800">
                        <i class="fas fa-chart-line mr-2 text-purple-600"></i>
                        导入状态
                    </h3>

                    <!-- 进度条 -->
                    <div class="mb-4">
                        <div class="flex justify-between text-sm text-gray-600 mb-1">
                            <span>总体进度</span>
                            <span id="progressPercent">0%</span>
                        </div>
                        <div class="progress-bar">
                            <div id="progressFill" class="progress-fill" style="width: 0%"></div>
                        </div>
                    </div>

                    <!-- 统计信息 -->
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div class="bg-blue-50 p-3 rounded-lg">
                            <div class="text-2xl font-bold text-blue-600" id="processedCount">0</div>
                            <div class="text-sm text-gray-600">已处理</div>
                        </div>
                        <div class="bg-green-50 p-3 rounded-lg">
                            <div class="text-2xl font-bold text-green-600" id="successCount">0</div>
                            <div class="text-sm text-gray-600">成功</div>
                        </div>
                        <div class="bg-yellow-50 p-3 rounded-lg">
                            <div class="text-2xl font-bold text-yellow-600" id="pendingCount">0</div>
                            <div class="text-sm text-gray-600">待处理</div>
                        </div>
                        <div class="bg-red-50 p-3 rounded-lg">
                            <div class="text-2xl font-bold text-red-600" id="failedCount">0</div>
                            <div class="text-sm text-gray-600">失败</div>
                        </div>
                    </div>

                    <!-- 时间信息 -->
                    <div class="text-sm text-gray-600 space-y-1">
                        <div>开始时间: <span id="startTime">-</span></div>
                        <div>预计完成: <span id="estimatedTime">-</span></div>
                        <div>导入ID: <code class="bg-gray-100 px-2 py-1 rounded text-xs" id="importId">-</code></div>
                    </div>
                </div>

                <!-- 实时日志 -->
                <div id="logSection" class="bg-white rounded-lg shadow-md p-6 hidden">
                    <h3 class="text-lg font-semibold mb-4 text-gray-800">
                        <i class="fas fa-terminal mr-2 text-gray-600"></i>
                        实时日志
                    </h3>
                    <div id="logContent" class="bg-gray-900 text-green-400 p-3 rounded-lg h-64 overflow-y-auto font-mono text-sm">
                        <!-- 日志内容将在这里动态生成 -->
                    </div>
                </div>

                <!-- 快速操作 -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h3 class="text-lg font-semibold mb-4 text-gray-800">
                        <i class="fas fa-tools mr-2 text-indigo-600"></i>
                        快速操作
                    </h3>
                    <div class="space-y-3">
                        <a href="/" class="block w-full text-center bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200">
                            <i class="fas fa-arrow-left mr-2"></i>
                            返回主页
                        </a>
                        <button id="cleanupBtn" class="w-full bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition duration-200">
                            <i class="fas fa-broom mr-2"></i>
                            清理旧会话
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let currentImportId = null;
        let statusCheckInterval = null;
        let logCount = 0;

        // DOM 元素
        const elements = {
            importData: document.getElementById('importData'),
            parseBtn: document.getElementById('parseBtn'),
            importBtn: document.getElementById('importBtn'),
            clearBtn: document.getElementById('clearBtn'),
            previewSection: document.getElementById('previewSection'),
            previewContent: document.getElementById('previewContent'),
            importStatus: document.getElementById('importStatus'),
            logSection: document.getElementById('logSection'),
            logContent: document.getElementById('logContent'),
            progressFill: document.getElementById('progressFill'),
            progressPercent: document.getElementById('progressPercent'),
            processedCount: document.getElementById('processedCount'),
            successCount: document.getElementById('successCount'),
            pendingCount: document.getElementById('pendingCount'),
            failedCount: document.getElementById('failedCount'),
            startTime: document.getElementById('startTime'),
            estimatedTime: document.getElementById('estimatedTime'),
            importId: document.getElementById('importId'),
            cleanupBtn: document.getElementById('cleanupBtn')
        };

        // 初始化事件监听器
        function initEventListeners() {
            elements.parseBtn.addEventListener('click', parseImportData);
            elements.importBtn.addEventListener('click', startBulkImport);
            elements.clearBtn.addEventListener('click', clearData);
            elements.cleanupBtn.addEventListener('click', cleanupSessions);
        }

        // 解析导入数据
        async function parseImportData() {
            const importData = elements.importData.value.trim();
            if (!importData) {
                showNotification('请输入导入数据', 'error');
                return;
            }

            try {
                const response = await fetch('/api/bulk-import/parse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ import_data: importData })
                });

                const result = await response.json();

                if (result.success) {
                    showPreview(result.emails);
                    elements.importBtn.disabled = false;
                    showNotification(`成功解析 ${result.count} 个邮箱账户`, 'success');
                } else {
                    showNotification(result.error || '解析失败', 'error');
                }
            } catch (error) {
                console.error('解析数据失败:', error);
                showNotification('解析数据失败: ' + error.message, 'error');
            }
        }

        // 显示预览
        function showPreview(emails) {
            elements.previewContent.innerHTML = `
                <div class="space-y-2">
                    ${emails.map(email => `
                        <div class="flex items-center justify-between p-2 bg-gray-50 rounded">
                            <div class="flex-1">
                                <div class="font-medium text-gray-800">${email.email}</div>
                                <div class="text-xs text-gray-500">
                                    ClientId: ${email.client_id} |
                                    Token: ${email.refresh_token_enc}
                                </div>
                            </div>
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                    `).join('')}
                </div>
            `;
            elements.previewSection.classList.remove('hidden');
        }

        // 开始批量导入
        async function startBulkImport() {
            const importData = elements.importData.value.trim();
            if (!importData) {
                showNotification('请输入导入数据', 'error');
                return;
            }

            try {
                const response = await fetch('/api/bulk-import/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ import_data: importData })
                });

                const result = await response.json();

                if (result.success) {
                    currentImportId = result.import_id;
                    showImportStatus(result);
                    startStatusMonitoring();
                    showNotification(result.message, 'success');
                    addLog('info', `开始批量导入，共 ${result.parsed_count} 个邮箱`);
                } else {
                    showNotification(result.error || '导入失败', 'error');
                }
            } catch (error) {
                console.error('批量导入失败:', error);
                showNotification('批量导入失败: ' + error.message, 'error');
            }
        }

        // 显示导入状态
        function showImportStatus(result) {
            elements.importStatus.classList.remove('hidden');
            elements.logSection.classList.remove('hidden');
            elements.importId.textContent = result.import_id;
            elements.startTime.textContent = new Date().toLocaleString();

            // 初始化统计数据
            updateStats({
                total: result.parsed_count,
                processed: 0,
                successful: 0,
                pending: result.parsed_count,
                failed: 0
            });
        }

        // 开始状态监控
        function startStatusMonitoring() {
            if (statusCheckInterval) {
                clearInterval(statusCheckInterval);
            }

            statusCheckInterval = setInterval(async () => {
                if (!currentImportId) return;

                try {
                    const response = await fetch(`/api/bulk-import/status/${currentImportId}`);
                    const status = await response.json();

                    if (status.error) {
                        clearInterval(statusCheckInterval);
                        showNotification('导入会话不存在', 'error');
                        return;
                    }

                    updateStats(status.stats);
                    updateProgress(status.stats);

                    if (status.status === 'completed') {
                        clearInterval(statusCheckInterval);
                        showNotification('批量导入完成！', 'success');
                        addLog('success', `导入完成，成功: ${status.stats.successful}, 失败: ${status.stats.failed}`);
                    }

                } catch (error) {
                    console.error('获取状态失败:', error);
                    addLog('error', '获取状态失败: ' + error.message);
                }
            }, 2000); // 每2秒检查一次
        }

        // 更新统计数据
        function updateStats(stats) {
            elements.processedCount.textContent = stats.processed || 0;
            elements.successCount.textContent = stats.successful || 0;
            elements.pendingCount.textContent = stats.pending || 0;
            elements.failedCount.textContent = stats.failed || 0;

            if (stats.processed > 0) {
                elements.processedCount.parentElement.classList.add('success-animation');
            }
        }

        // 更新进度条
        function updateProgress(stats) {
            if (!stats.total) return;

            const percentage = Math.round((stats.processed / stats.total) * 100);
            elements.progressFill.style.width = `${percentage}%`;
            elements.progressPercent.textContent = `${percentage}%`;

            // 估算剩余时间
            if (stats.processed > 0 && stats.pending > 0) {
                const avgTimePerItem = 3000; // 预估每个邮箱3秒
                const remainingTime = stats.pending * avgTimePerItem;
                const eta = new Date(Date.now() + remainingTime);
                elements.estimatedTime.textContent = eta.toLocaleTimeString();
            }
        }

        // 添加日志
        function addLog(type, message) {
            const timestamp = new Date().toLocaleTimeString();
            const logClass = {
                'info': 'text-blue-400',
                'success': 'text-green-400',
                'error': 'text-red-400',
                'warning': 'text-yellow-400'
            }[type] || 'text-gray-400';

            const logEntry = `[${timestamp}] ${message}\n`;
            elements.logContent.innerHTML += `<span class="${logClass}">${logEntry}</span>`;
            elements.logContent.scrollTop = elements.logContent.scrollHeight;
            logCount++;

            // 限制日志条数
            if (logCount > 100) {
                const lines = elements.logContent.innerHTML.split('\n');
                elements.logContent.innerHTML = lines.slice(-50).join('\n');
                logCount = 50;
            }
        }

        // 清空数据
        function clearData() {
            elements.importData.value = '';
            elements.previewSection.classList.add('hidden');
            elements.importStatus.classList.add('hidden');
            elements.logSection.classList.add('hidden');
            elements.importBtn.disabled = true;
            currentImportId = null;
            if (statusCheckInterval) {
                clearInterval(statusCheckInterval);
                statusCheckInterval = null;
            }
        }

        // 清理会话
        async function cleanupSessions() {
            try {
                const response = await fetch('/api/bulk-import/cleanup', {
                    method: 'POST'
                });
                const result = await response.json();
                showNotification(result.message, 'success');
            } catch (error) {
                showNotification('清理会话失败: ' + error.message, 'error');
            }
        }

        // 显示通知
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500' :
                type === 'error' ? 'bg-red-500' :
                type === 'warning' ? 'bg-yellow-500' :
                'bg-blue-500'
            } text-white`;
            notification.textContent = message;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // 页面加载完成后初始化
        document.addEventListener('DOMContentLoaded', function() {
            initEventListeners();
            addLog('info', '批量导入系统已就绪');
        });
    </script>
</body>
</html>