<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MailManager - 智能邮箱管理</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* 响应式断点自定义 */
        @media (max-width: 640px) {
            .hide-mobile { display: none !important; }
            .mobile-full { width: 100% !important; }
            .mobile-stack { flex-direction: column !important; }
            .mobile-center { text-align: center !important; }
            .mobile-p-2 { padding: 0.5rem !important; }
            .mobile-text-xs { font-size: 0.75rem !important; }
        }

        /* 暗色主题支持 */
        @media (prefers-color-scheme: dark) {
            .dark-theme {
                background-color: #1f2937;
                color: #f3f4f6;
            }
            .dark-theme .bg-white { background-color: #374151 !important; }
            .dark-theme .bg-gray-50 { background-color: #1f2937 !important; }
            .dark-theme .text-gray-900 { color: #f3f4f6 !important; }
            .dark-theme .text-gray-600 { color: #d1d5db !important; }
            .dark-theme .border-gray-200 { border-color: #4b5563 !important; }
            .dark-theme .hover\:bg-gray-50:hover { background-color: #374151 !important; }
            .dark-theme .hover\:bg-blue-50:hover { background-color: #1e3a8a !important; }
        }

        /* 状态样式 */
        .status-pending {
            background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85em;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);
        }

        .status-authorized {
            background: linear-gradient(135deg, #10B981 0%, #059669 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85em;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);
        }

        .status-error {
            background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85em;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);
        }

        /* 监控动画 */
        .monitoring {
            animation: pulse 2s infinite;
            position: relative;
        }

        .monitoring::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(34, 197, 94, 0.1);
            border-radius: inherit;
            animation: ripple 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.02); }
        }

        @keyframes ripple {
            0% { transform: scale(0.9); opacity: 0.5; }
            100% { transform: scale(1.1); opacity: 0; }
        }

        /* 验证码样式 */
        .code-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 6px 12px;
            border-radius: 8px;
            font-weight: bold;
            font-size: 0.9em;
            box-shadow: 0 4px 6px rgba(102, 126, 234, 0.3);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .code-badge::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .code-badge:hover::before {
            left: 100%;
        }

        .code-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(102, 126, 234, 0.4);
        }

        /* 按钮样式 */
        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(59, 130, 246, 0.3);
            position: relative;
            overflow: hidden;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(59, 130, 246, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(107, 114, 128, 0.3);
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(107, 114, 128, 0.4);
        }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(239, 68, 68, 0.3);
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(239, 68, 68, 0.4);
        }

        /* 分页样式 */
        .simple-pagination {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: wrap;
        }

        .page-btn {
            padding: 10px 16px;
            border: 2px solid #e5e7eb;
            background: white;
            color: #374151;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            min-width: 44px;
            text-align: center;
        }

        .page-btn:hover {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
            border-color: #3b82f6;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        .page-btn.active {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
            border-color: #3b82f6;
            box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
        }

        /* 表格样式 */
        .modern-table {
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            border: 1px solid #e5e7eb;
        }

        .modern-table thead {
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            border-bottom: 2px solid #e2e8f0;
        }

        .modern-table tbody tr {
            transition: all 0.2s ease;
            border-bottom: 1px solid #f1f5f9;
        }

        .modern-table tbody tr:hover {
            background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
            transform: scale(1.005);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        }

        /* 加载状态 */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* 通知样式 */
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            padding: 16px 24px;
            border-radius: 12px;
            font-weight: 600;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            transform: translateX(400px);
            transition: transform 0.3s ease;
            max-width: 350px;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification.success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .notification.error {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
        }

        .notification.info {
            background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            color: white;
        }

        /* 搜索框样式 */
        .search-box {
            position: relative;
        }

        .search-box input {
            padding-left: 40px;
            border-radius: 25px;
            border: 2px solid #e5e7eb;
            transition: all 0.3s ease;
        }

        .search-box input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .search-box i {
            position: absolute;
            left: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

        /* 卡片样式 */
        .stats-card {
            background: white;
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.07);
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stats-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6);
        }

        .stats-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        /* 响应式表格 */
        @media (max-width: 768px) {
            .modern-table {
                display: block;
                overflow-x: auto;
            }

            .modern-table thead {
                display: none;
            }

            .modern-table tbody tr {
                display: block;
                margin-bottom: 1rem;
                border: 1px solid #e5e7eb;
                border-radius: 8px;
                padding: 1rem;
                background: white;
            }

            .modern-table tbody td {
                display: block;
                text-align: right;
                padding: 0.5rem 0;
                border: none;
            }

            .modern-table tbody td::before {
                content: attr(data-label);
                float: left;
                font-weight: 600;
                color: #374151;
            }
        }

        /* 焦点样式 */
        *:focus {
            outline: 2px solid #3b82f6;
            outline-offset: 2px;
        }

        /* 平滑滚动 */
        html {
            scroll-behavior: smooth;
        }

        /* 选择文本样式 */
        ::selection {
            background: rgba(59, 130, 246, 0.2);
            color: #1e40af;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- 通知容器 -->
    <div id="notification-container"></div>

    <!-- 头部导航 -->
    <header class="bg-white shadow-lg sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-4">
                    <div class="bg-gradient-to-r from-blue-600 to-indigo-600 p-2 rounded-lg">
                        <i class="fas fa-envelope text-white text-xl"></i>
                    </div>
                    <h1 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
                        MailManager
                    </h1>
                    <span class="hidden sm:inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full font-semibold">
                        <i class="fas fa-circle text-green-500 mr-1"></i>
                        在线
                    </span>
                </div>

                <div class="flex items-center space-x-4">
                    <!-- 主题切换 -->
                    <button onclick="toggleTheme()" class="p-2 rounded-lg hover:bg-gray-100 transition-colors" title="切换主题">
                        <i class="fas fa-moon text-gray-600"></i>
                    </button>

                    <!-- 刷新按钮 -->
                    <button onclick="refreshData()" class="btn-primary mobile-full" title="刷新数据">
                        <i class="fas fa-sync-alt mr-2"></i>
                        <span class="hide-mobile">刷新</span>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- 主要内容 -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- 统计卡片 -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <div class="stats-card">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">总账户数</p>
                        <p class="text-3xl font-bold text-gray-900" id="total-accounts">-</p>
                    </div>
                    <div class="bg-blue-100 p-3 rounded-full">
                        <i class="fas fa-users text-blue-600 text-xl"></i>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">已授权</p>
                        <p class="text-3xl font-bold text-green-600" id="authorized-count">-</p>
                    </div>
                    <div class="bg-green-100 p-3 rounded-full">
                        <i class="fas fa-check-circle text-green-600 text-xl"></i>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">待处理</p>
                        <p class="text-3xl font-bold text-yellow-600" id="pending-count">-</p>
                    </div>
                    <div class="bg-yellow-100 p-3 rounded-full">
                        <i class="fas fa-clock text-yellow-600 text-xl"></i>
                    </div>
                </div>
            </div>

            <div class="stats-card">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-gray-500 text-sm font-medium">活跃监控</p>
                        <p class="text-3xl font-bold text-purple-600" id="monitoring-count">-</p>
                    </div>
                    <div class="bg-purple-100 p-3 rounded-full">
                        <i class="fas fa-satellite-dish text-purple-600 text-xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- 搜索和筛选区域 -->
        <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input
                        type="text"
                        id="search-input"
                        placeholder="搜索邮箱地址..."
                        class="w-full px-4 py-3 border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        onkeyup="handleSearch(event)"
                    >
                </div>

                <select
                    id="status-filter"
                    class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    onchange="handleFilter()"
                >
                    <option value="">所有状态</option>
                    <option value="pending">待处理</option>
                    <option value="authorized">已授权</option>
                    <option value="error">错误</option>
                </select>

                <select
                    id="sort-order"
                    class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    onchange="handleSort()"
                >
                    <option value="import_sequence_desc">按序号 ↓</option>
                    <option value="import_sequence_asc">按序号 ↑</option>
                    <option value="last_active_at_desc">按活跃时间 ↓</option>
                    <option value="last_active_at_asc">按活跃时间 ↑</option>
                    <option value="email_asc">按邮箱 A-Z</option>
                    <option value="email_desc">按邮箱 Z-A</option>
                </select>
            </div>

            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-600">
                    <span id="results-info">显示 0 个结果</span>
                </div>

                <div class="flex gap-2">
                    <button onclick="exportData()" class="btn-secondary mobile-full">
                        <i class="fas fa-download mr-2"></i>
                        <span class="hide-mobile">导出</span>
                    </button>

                    <button onclick="showImportModal()" class="btn-primary mobile-full">
                        <i class="fas fa-plus mr-2"></i>
                        <span class="hide-mobile">导入账户</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- 数据表格 -->
        <div class="bg-white rounded-xl shadow-lg overflow-hidden">
            <div class="overflow-x-auto">
                <table class="modern-table w-full">
                    <thead>
                        <tr class="text-left">
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider">序号</th>
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider">邮箱地址</th>
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider">状态</th>
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider">最新验证码</th>
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider hide-mobile">最后活跃</th>
                            <th class="px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                        </tr>
                    </thead>
                    <tbody id="accounts-table-body" class="bg-white divide-y divide-gray-200">
                        <!-- 数据将通过JavaScript动态加载 -->
                    </tbody>
                </table>
            </div>

            <!-- 分页 -->
            <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
                <div class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0">
                    <div class="text-sm text-gray-700">
                        显示第 <span id="start-item">1</span> - <span id="end-item">10</span> 条，
                        共 <span id="total-items">0</span> 条记录
                    </div>

                    <div class="simple-pagination" id="pagination">
                        <!-- 分页按钮将通过JavaScript动态生成 -->
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- 导入模态框 -->
    <div id="import-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-xl bg-white">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold text-gray-900">导入账户</h3>
                <button onclick="closeImportModal()" class="text-gray-400 hover:text-gray-600">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        导入数据
                    </label>
                    <textarea
                        id="import-data"
                        rows="4"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="请输入邮箱导入数据..."></textarea>
                </div>

                <div class="flex justify-end space-x-3">
                    <button onclick="closeImportModal()" class="btn-secondary">
                        取消
                    </button>
                    <button onclick="importAccount()" class="btn-primary">
                        <i class="fas fa-import mr-2"></i>
                        导入
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let currentPage = 1;
        let pageSize = 10;
        let searchQuery = '';
        let statusFilter = '';
        let sortBy = 'import_sequence_desc';
        let isLoading = false;

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            loadAccounts();
            setupEventSource();

            // 绑定键盘快捷键
            document.addEventListener('keydown', function(e) {
                if (e.ctrlKey || e.metaKey) {
                    switch(e.key) {
                        case 'r':
                            e.preventDefault();
                            refreshData();
                            break;
                        case 'f':
                            e.preventDefault();
                            document.getElementById('search-input').focus();
                            break;
                        case 'n':
                            e.preventDefault();
                            showImportModal();
                            break;
                    }
                }
            });
        });

        // 加载账户数据
        async function loadAccounts() {
            if (isLoading) return;

            isLoading = true;
            showLoading();

            try {
                const params = new URLSearchParams({
                    page: currentPage,
                    size: pageSize,
                    search: searchQuery,
                    status: statusFilter,
                    sort: sortBy
                });

                const response = await fetch(`/api/accounts/paged?${params}`);
                const data = await response.json();

                if (data.success) {
                    renderAccountsTable(data.accounts);
                    renderPagination(data.current_page, data.total_pages, data.total);
                    updateStats(data);
                    updateResultsInfo(data);
                } else {
                    showNotification('加载数据失败', 'error');
                }
            } catch (error) {
                console.error('加载账户失败:', error);
                showNotification('网络错误，请重试', 'error');
            } finally {
                isLoading = false;
                hideLoading();
            }
        }

        // 渲染表格
        function renderAccountsTable(accounts) {
            const tbody = document.getElementById('accounts-table-body');
            tbody.innerHTML = '';

            if (accounts.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-12 text-center text-gray-500">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-inbox text-4xl mb-3 text-gray-300"></i>
                                <p class="text-lg font-medium">暂无数据</p>
                                <p class="text-sm mt-1">请尝试调整搜索条件或导入新账户</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }

            accounts.forEach(account => {
                const tr = document.createElement('tr');
                tr.className = 'hover:bg-gray-50 transition-colors';
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-center" data-label="序号">
                        <span class="inline-flex items-center justify-center w-8 h-8 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-full text-sm font-bold">
                            ${account.import_sequence || '-'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap" data-label="邮箱地址">
                        <div class="flex items-center">
                            <i class="fas fa-envelope text-gray-400 mr-3"></i>
                            <span class="text-sm font-medium text-gray-900 cursor-pointer hover:text-blue-600 transition"
                                  onclick="copyEmail('${account.email}', ${account.id})"
                                  title="点击复制邮箱">
                                ${account.email}
                            </span>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap" data-label="状态">
                        <span class="${getStatusClass(account.status)}">
                            <i class="fas ${getStatusIcon(account.status)}"></i>
                            ${getStatusText(account.status)}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap" data-label="最新验证码">
                        ${getVerificationCodeDisplay(account)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 hide-mobile" data-label="最后活跃">
                        ${getActiveTimeDisplay(account)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm" data-label="操作">
                        <div class="flex gap-2 flex-wrap">
                            <button onclick="copyEmail('${account.email}', ${account.id})"
                                    class="btn-primary text-xs py-1 px-2"
                                    title="复制邮箱">
                                <i class="fas fa-copy mr-1"></i>
                                <span class="hide-mobile">邮箱</span>
                            </button>
                            <button onclick="copyCode('${account.latest_code || ''}')"
                                    class="btn-secondary text-xs py-1 px-2 ${!account.latest_code ? 'opacity-50 cursor-not-allowed' : ''}"
                                    title="复制验证码"
                                    ${!account.latest_code ? 'disabled' : ''}>
                                <i class="fas fa-key mr-1"></i>
                                <span class="hide-mobile">验证码</span>
                            </button>
                            <button onclick="deleteAccount(${account.id})"
                                    class="btn-danger text-xs py-1 px-2"
                                    title="删除账户">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        }

        // 工具函数
        function getStatusClass(status) {
            const classes = {
                'pending': 'status-pending',
                'authorized': 'status-authorized',
                'error': 'status-error'
            };
            return classes[status] || 'status-pending';
        }

        function getStatusIcon(status) {
            const icons = {
                'pending': 'fa-clock',
                'authorized': 'fa-check-circle',
                'error': 'fa-exclamation-circle'
            };
            return icons[status] || 'fa-question-circle';
        }

        function getStatusText(status) {
            const texts = {
                'pending': '待处理',
                'authorized': '已授权',
                'error': '错误'
            };
            return texts[status] || '未知';
        }

        function getVerificationCodeDisplay(account) {
            if (account.latest_code) {
                return `<span class="code-badge cursor-pointer" onclick="copyCode('${account.latest_code}')" title="点击复制">
                           <i class="fas fa-key mr-1"></i>
                           ${account.latest_code}
                       </span>`;
            }
            return '<span class="text-gray-400 text-sm">暂无验证码</span>';
        }

        function getActiveTimeDisplay(account) {
            if (!account.last_active_at) return '<span class="text-gray-400">从未活跃</span>';

            const date = new Date(account.last_active_at);
            const now = new Date();
            const diffMs = now - date;
            const diffMins = Math.floor(diffMs / 60000);
            const diffHours = Math.floor(diffMs / 3600000);
            const diffDays = Math.floor(diffMs / 86400000);

            if (diffMins < 1) return '刚刚';
            if (diffMins < 60) return `${diffMins}分钟前`;
            if (diffHours < 24) return `${diffHours}小时前`;
            if (diffDays < 7) return `${diffDays}天前`;

            return date.toLocaleDateString('zh-CN');
        }

        // 分页渲染
        function renderPagination(currentPage, totalPages, total) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';

            // 上一页按钮
            const prevBtn = document.createElement('button');
            prevBtn.className = 'page-btn';
            prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
            prevBtn.onclick = () => {
                if (currentPage > 1) {
                    this.currentPage = currentPage - 1;
                    loadAccounts();
                }
            };
            prevBtn.disabled = currentPage === 1;
            pagination.appendChild(prevBtn);

            // 页码按钮
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                addPageButton(1);
                if (startPage > 2) {
                    const dots = document.createElement('span');
                    dots.className = 'px-2 text-gray-500';
                    dots.textContent = '...';
                    pagination.appendChild(dots);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                addPageButton(i);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const dots = document.createElement('span');
                    dots.className = 'px-2 text-gray-500';
                    dots.textContent = '...';
                    pagination.appendChild(dots);
                }
                addPageButton(totalPages);
            }

            // 下一页按钮
            const nextBtn = document.createElement('button');
            nextBtn.className = 'page-btn';
            nextBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
            nextBtn.onclick = () => {
                if (currentPage < totalPages) {
                    this.currentPage = currentPage + 1;
                    loadAccounts();
                }
            };
            nextBtn.disabled = currentPage === totalPages;
            pagination.appendChild(nextBtn);

            function addPageButton(pageNum) {
                const btn = document.createElement('button');
                btn.className = `page-btn ${pageNum === currentPage ? 'active' : ''}`;
                btn.textContent = pageNum;
                btn.onclick = () => {
                    this.currentPage = pageNum;
                    loadAccounts();
                };
                pagination.appendChild(btn);
            }
        }

        // 搜索处理
        function handleSearch(event) {
            if (event.key === 'Enter') {
                searchQuery = event.target.value;
                currentPage = 1;
                loadAccounts();
            }
        }

        // 筛选处理
        function handleFilter() {
            statusFilter = document.getElementById('status-filter').value;
            currentPage = 1;
            loadAccounts();
        }

        // 排序处理
        function handleSort() {
            sortBy = document.getElementById('sort-order').value;
            currentPage = 1;
            loadAccounts();
        }

        // 刷新数据
        function refreshData() {
            loadAccounts();
            showNotification('数据已刷新', 'success');
        }

        // 导出数据
        async function exportData() {
            try {
                const response = await fetch('/api/accounts/export');
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `accounts_${new Date().toISOString().split('T')[0]}.csv`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                showNotification('数据导出成功', 'success');
            } catch (error) {
                console.error('导出失败:', error);
                showNotification('导出失败', 'error');
            }
        }

        // 模态框处理
        function showImportModal() {
            document.getElementById('import-modal').classList.remove('hidden');
        }

        function closeImportModal() {
            document.getElementById('import-modal').classList.add('hidden');
            document.getElementById('import-data').value = '';
        }

        // 导入账户
        async function importAccount() {
            const importData = document.getElementById('import-data').value.trim();
            if (!importData) {
                showNotification('请输入导入数据', 'error');
                return;
            }

            try {
                const response = await fetch('/api/accounts/batch-import', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ import_data: importData })
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('账户导入成功', 'success');
                    closeImportModal();
                    loadAccounts();
                } else {
                    showNotification(result.error || '导入失败', 'error');
                }
            } catch (error) {
                console.error('导入失败:', error);
                showNotification('网络错误，请重试', 'error');
            }
        }

        // 复制邮箱
        async function copyEmail(email, accountId) {
            try {
                await navigator.clipboard.writeText(email);
                showNotification(`邮箱已复制: ${email}`, 'success');

                // 触发监控
                if (accountId) {
                    try {
                        await fetch('/api/monitor/copy-trigger', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ account_id: accountId })
                        });
                    } catch (error) {
                        console.warn('监控启动失败:', error);
                    }
                }
            } catch (error) {
                console.error('复制失败:', error);
                showNotification('复制失败', 'error');
            }
        }

        // 复制验证码
        async function copyCode(code) {
            if (!code) {
                showNotification('暂无验证码可复制', 'error');
                return;
            }

            try {
                await navigator.clipboard.writeText(code);
                showNotification(`验证码已复制: ${code}`, 'success');
            } catch (error) {
                console.error('复制失败:', error);
                showNotification('复制失败', 'error');
            }
        }

        // 删除账户
        async function deleteAccount(accountId) {
            if (!confirm('确定要删除这个账户吗？此操作不可撤销。')) {
                return;
            }

            try {
                const response = await fetch(`/api/accounts/${accountId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('账户已删除', 'success');
                    loadAccounts();
                } else {
                    showNotification(result.error || '删除失败', 'error');
                }
            } catch (error) {
                console.error('删除失败:', error);
                showNotification('网络错误，请重试', 'error');
            }
        }

        // 主题切换
        function toggleTheme() {
            document.body.classList.toggle('dark-theme');
            const icon = document.querySelector('[onclick="toggleTheme()"] i');
            if (document.body.classList.contains('dark-theme')) {
                icon.classList.remove('fa-moon');
                icon.classList.add('fa-sun');
            } else {
                icon.classList.remove('fa-sun');
                icon.classList.add('fa-moon');
            }
        }

        // 更新统计信息
        function updateStats(data) {
            document.getElementById('total-accounts').textContent = data.total || 0;

            // 计算各状态数量
            const authorized = data.accounts ? data.accounts.filter(a => a.status === 'authorized').length : 0;
            const pending = data.accounts ? data.accounts.filter(a => a.status === 'pending').length : 0;
            const monitoring = data.accounts ? data.accounts.filter(a => a.is_monitoring).length : 0;

            document.getElementById('authorized-count').textContent = authorized;
            document.getElementById('pending-count').textContent = pending;
            document.getElementById('monitoring-count').textContent = monitoring;
        }

        // 更新结果信息
        function updateResultsInfo(data) {
            const start = (data.current_page - 1) * data.page_size + 1;
            const end = Math.min(data.current_page * data.page_size, data.total);

            document.getElementById('start-item').textContent = data.total > 0 ? start : 0;
            document.getElementById('end-item').textContent = end;
            document.getElementById('total-items').textContent = data.total;
            document.getElementById('results-info').textContent = `显示 ${end} 个结果`;
        }

        // 通知系统
        function showNotification(message, type = 'info') {
            const container = document.getElementById('notification-container');
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas ${getNotificationIcon(type)} mr-3"></i>
                    <span>${message}</span>
                </div>
            `;

            container.appendChild(notification);

            // 显示动画
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);

            // 自动隐藏
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    if (container.contains(notification)) {
                        container.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }

        function getNotificationIcon(type) {
            const icons = {
                'success': 'fa-check-circle',
                'error': 'fa-exclamation-circle',
                'info': 'fa-info-circle'
            };
            return icons[type] || 'fa-info-circle';
        }

        // 加载状态
        function showLoading() {
            const tbody = document.getElementById('accounts-table-body');
            tbody.innerHTML = `
                <tr>
                    <td colspan="6" class="px-6 py-12 text-center">
                        <div class="flex flex-col items-center">
                            <div class="loading mb-4"></div>
                            <p class="text-gray-500">正在加载数据...</p>
                        </div>
                    </td>
                </tr>
            `;
        }

        function hideLoading() {
            // 加载完成后由renderAccountsTable处理
        }

        // SSE事件监听
        function setupEventSource() {
            const eventSource = new EventSource('/api/events');

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === 'new_code') {
                    showNotification(`收到新验证码: ${data.code}`, 'success');
                    loadAccounts(); // 刷新数据
                } else if (data.type === 'monitoring_status') {
                    if (data.status === 'started') {
                        showNotification(`监控已启动`, 'info');
                    } else {
                        showNotification(`监控已停止`, 'info');
                    }
                    loadAccounts(); // 刷新数据
                }
            };

            eventSource.onerror = function(event) {
                console.error('SSE连接错误:', event);
                setTimeout(() => setupEventSource(), 5000); // 5秒后重连
            };
        }

        // 响应式处理
        window.addEventListener('resize', function() {
            // 如果是移动端，调整页面大小
            if (window.innerWidth < 768) {
                pageSize = 5;
            } else {
                pageSize = 10;
            }
            loadAccounts();
        });

        // 初始化时检查屏幕大小
        if (window.innerWidth < 768) {
            pageSize = 5;
        }
    </script>
</body>
</html>