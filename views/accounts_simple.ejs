<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MailManager - 简化管理界面</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .status-pending { color: #F59E0B; }
        .status-authorized { color: #10B981; }
        .status-error { color: #EF4444; }
        .monitoring { animation: pulse 2s infinite; }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .code-badge {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 0.9em;
        }
        .text-code {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-weight: bold;
            font-size: 1em;
        }
        .simple-pagination {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        .page-btn {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            background: white;
            color: #374151;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
        }
        .page-btn:hover {
            background: #f3f4f6;
        }
        .page-btn.active {
            background: #3b82f6;
            color: white;
            border-color: #3b82f6;
        }
        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        .search-filter {
            padding: 8px 12px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            width: 200px;
        }
        .code-cell {
            min-width: 120px;
            white-space: nowrap;
        }
        .stats-row {
            display: flex;
            gap: 20px;
            margin-bottom: 20px;
            background: #f8fafc;
            padding: 15px;
            border-radius: 8px;
        }
        .stat-item {
            text-align: center;
        }
        .stat-number {
            font-size: 1.5em;
            font-weight: bold;
            color: #1f2937;
        }
        .stat-label {
            color: #6b7280;
            font-size: 0.9em;
        }
        .refresh-loading {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-50">
    <div class="container mx-auto px-4 py-6 max-w-7xl">
        <!-- 头部 -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">
                        <i class="fas fa-envelope mr-2"></i>MailManager
                    </h1>
                    <p class="text-gray-600 mt-1">简单高效的邮箱验证码管理</p>
                </div>
                <div class="flex gap-3">
                    <button onclick="showImportModal()" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg transition">
                        <i class="fas fa-file-import mr-1"></i>导入邮箱
                    </button>
                    <button onclick="refreshData()" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition">
                        <i class="fas fa-sync-alt mr-1"></i>刷新
                    </button>
                    <button onclick="confirmClearAllData()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition">
                        <i class="fas fa-trash-alt mr-1"></i>清空数据
                    </button>
                </div>
            </div>
        </div>

        <!-- 统计信息 -->
        <div class="stats-row">
            <div class="stat-item">
                <div class="stat-number" id="totalAccounts">0</div>
                <div class="stat-label">总账户数</div>
            </div>
            <div class="stat-item">
                <div class="stat-number text-green-600" id="activeCount">0</div>
                <div class="stat-label">活跃状态</div>
            </div>
            <div class="stat-item">
                <div class="stat-number text-yellow-600" id="pendingCount">0</div>
                <div class="stat-label">待授权</div>
            </div>
            <div class="stat-item">
                <div class="stat-number text-purple-600" id="monitoringCount">0</div>
                <div class="stat-label">监控中</div>
            </div>
        </div>

        <!-- 搜索和过滤 -->
        <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
            <div class="flex gap-4 items-center flex-wrap">
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">搜索:</label>
                    <input type="text" id="searchInput" placeholder="邮箱地址"
                           class="search-filter" onkeyup="filterAccounts()">
                </div>
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">状态:</label>
                    <select id="statusFilter" class="search-filter" onchange="filterAccounts()">
                        <option value="">全部</option>
                        <option value="pending">待授权</option>
                        <option value="authorized">已授权</option>
                        <option value="error">错误</option>
                    </select>
                </div>
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">每页显示:</label>
                    <select id="pageSize" class="search-filter" onchange="changePageSize()">
                        <option value="20">20</option>
                        <option value="50" selected>50</option>
                        <option value="100">100</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- 账户列表 -->
        <div class="bg-white rounded-lg shadow-sm">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50 border-b">
                        <tr>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 w-20" onclick="sortBySequence()">
    <span class="flex items-center gap-1">
        序号
        <i id="seqSortIcon" class="fas fa-sort-up text-gray-400"></i>
    </span>
</th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 w-24" onclick="sortByStatus()">
                                <span class="flex items-center gap-1">
                                    状态
                                    <i id="statusSortIcon" class="fas fa-sort text-gray-400"></i>
                                </span>
                            </th>
                            <th class="px-4 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 w-80" onclick="sortByEmail()">
                                <span class="flex items-center gap-1">
                                    邮箱地址
                                    <i id="emailSortIcon" class="fas fa-sort text-gray-400"></i>
                                </span>
                            </th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider w-16">选中</th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider w-36">最新验证码</th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 w-36" onclick="sortByCodeTime()">
                                <span class="flex items-center gap-1">
                                    验证码收件时间
                                    <i id="codeTimeSortIcon" class="fas fa-sort text-gray-400"></i>
                                </span>
                            </th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 w-28" onclick="sortBySender()">
                                <span class="flex items-center gap-1">
                                    发件人
                                    <i id="senderSortIcon" class="fas fa-sort text-gray-400"></i>
                                </span>
                            </th>
                            <th class="px-3 py-3 text-left text-base font-medium text-gray-700 uppercase tracking-wider w-32">操作</th>
                        </tr>
                    </thead>
                    <tbody id="accountsTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- 账户数据将在这里加载 -->
                    </tbody>
                </table>
            </div>

            <!-- 分页控制 -->
            <div class="px-6 py-4 border-t bg-gray-50">
                <div class="flex justify-between items-center">
                    <div class="text-sm text-gray-700">
                        显示 <span id="showingFrom">0</span> - <span id="showingTo">0</span>
                        共 <span id="totalRecords">0</span> 条记录
                    </div>
                    <div class="simple-pagination" id="pagination">
                        <!-- 分页按钮将在这里生成 -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 全局状态
        let currentPage = 1;
        let pageSize = 50;
        let totalRecords = 0;
        let accounts = [];
        let filteredAccounts = [];
        let sortOrder = 'asc'; // 'asc' or 'desc'
        let sortBy = 'import_seq'; // field to sort by
        let monitoringAccounts = new Set();

        // 页面加载时初始化
        document.addEventListener('DOMContentLoaded', function() {
            updateSortIcon(); // 设置初始排序图标
            loadAccounts();
            setupEventSource();
        });

        // 加载账户数据
        async function loadAccounts() {
            try {
                const url = `/api/accounts/paged?page=${currentPage}&size=${pageSize}&search=${encodeURIComponent(document.getElementById('searchInput').value)}&status=${document.getElementById('statusFilter').value}&sortBy=${sortBy}&order=${sortOrder}`;
                console.log('Loading accounts with URL:', url); // 调试日志
                const response = await fetch(url);
                const data = await response.json();

                accounts = data.accounts;
                totalRecords = data.total;
                filteredAccounts = accounts;

                updateStats();
                renderTable();
                renderPagination();

                return data; // 返回数据以便链式调用
            } catch (error) {
                console.error('加载账户失败:', error);
                showError('加载数据失败');
                return null;
            }
        }

        // 更新统计信息
        function updateStats() {
            document.getElementById('totalAccounts').textContent = totalRecords;
            document.getElementById('activeCount').textContent = accounts.filter(a => a.status === 'authorized').length;
            document.getElementById('pendingCount').textContent = accounts.filter(a => a.status === 'pending').length;
            document.getElementById('monitoringCount').textContent = '0'; // 监控功能已简化
        }

        // 渲染表格
        function renderTable() {
            const tbody = document.getElementById('accountsTableBody');
            tbody.innerHTML = '';

            filteredAccounts.forEach(account => {
                const row = createAccountRow(account);
                tbody.appendChild(row);
            });

            // 更新显示信息
            const from = (currentPage - 1) * pageSize + 1;
            const to = Math.min(currentPage * pageSize, totalRecords);
            document.getElementById('showingFrom').textContent = from;
            document.getElementById('showingTo').textContent = to;
            document.getElementById('totalRecords').textContent = totalRecords;
        }

        // 创建账户行
        function createAccountRow(account) {
            const tr = document.createElement('tr');
            tr.className = 'hover:bg-gray-50 transition-colors';
            tr.innerHTML = `
                <td class="px-3 py-3 whitespace-nowrap text-center w-20">
                    <span class="text-base font-medium text-gray-900 bg-gray-100 px-2 py-1 rounded">
                        ${account.import_seq || '-'}
                    </span>
                </td>
                <td class="px-3 py-3 whitespace-nowrap w-24">
                    <span class="status-${account.status}">
                        <i class="fas ${getStatusIcon(account.status)} mr-1"></i>
                        <span class="text-base">${getStatusText(account.status)}</span>
                    </span>
                </td>
                <td class="px-4 py-3 whitespace-nowrap w-80">
                    <div class="flex items-center">
                        <i class="fas fa-envelope text-gray-400 mr-3 text-base"></i>
                        <span class="text-base font-medium text-gray-900 cursor-pointer hover:text-blue-600 transition truncate"
                              onclick="copyEmail('${account.email}', ${account.id})"
                              title="${account.email}">
                            ${account.email}
                        </span>
                    </div>
                </td>
                <td class="px-3 py-3 whitespace-nowrap text-center w-16">
                    <input type="checkbox"
                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 focus:ring-2"
                           data-account-id="${account.id}"
                           onchange="handleAccountSelection(this)">
                </td>
                <td class="px-3 py-3 whitespace-nowrap w-24 code-cell">
                    <div class="flex flex-col">
                        ${getVerificationCodeDisplay(account)}
                    </div>
                </td>
                <td class="px-3 py-3 whitespace-nowrap text-base text-gray-600 w-36">
                    ${getActiveTimeDisplay(account)}
                </td>
                <td class="px-3 py-3 whitespace-nowrap text-base text-gray-600 w-28">
                    ${getEmailSenderDisplay(account)}
                </td>
                <td class="px-3 py-3 whitespace-nowrap w-32">
                    <div class="flex gap-1">
                        <button onclick="copyEmail('${account.email}', ${account.id})"
                                class="px-2 py-1 bg-blue-100 text-blue-700 hover:bg-blue-200 rounded transition text-base">
                            复制
                        </button>
                        <button onclick="copyCode('${account.latest_code || '暂无验证码'}')"
                        class="px-2 py-1 bg-purple-100 text-purple-700 hover:bg-purple-200 rounded transition text-base">
                            验证码
                        </button>
                        <button onclick="deleteAccount(${account.id})"
                                class="px-2 py-1 bg-gray-100 text-gray-700 hover:bg-gray-200 rounded transition text-base">
                            删除
                        </button>
                    </div>
                </td>
            `;
            return tr;
        }

        // 渲染分页
        function renderPagination() {
            const pagination = document.getElementById('pagination');
            const totalPages = Math.ceil(totalRecords / pageSize);

            let html = '';

            // 上一页
            html += `<button class="page-btn" onclick="goToPage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>
                <i class="fas fa-chevron-left"></i>
            </button>`;

            // 页码
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, currentPage + 2);

            if (startPage > 1) {
                html += `<button class="page-btn" onclick="goToPage(1)">1</button>`;
                if (startPage > 2) html += `<span>...</span>`;
            }

            for (let i = startPage; i <= endPage; i++) {
                html += `<button class="page-btn ${i === currentPage ? 'active' : ''}" onclick="goToPage(${i})">${i}</button>`;
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) html += `<span>...</span>`;
                html += `<button class="page-btn" onclick="goToPage(${totalPages})">${totalPages}</button>`;
            }

            // 下一页
            html += `<button class="page-btn" onclick="goToPage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>
                <i class="fas fa-chevron-right"></i>
            </button>`;

            pagination.innerHTML = html;
        }

        // 页面跳转
        function goToPage(page) {
            const totalPages = Math.ceil(totalRecords / pageSize);
            if (page < 1 || page > totalPages) return;

            currentPage = page;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 修改页面大小
        function changePageSize() {
            pageSize = parseInt(document.getElementById('pageSize').value);
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 过滤账户
        function filterAccounts() {
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 保存选中的账户
        function saveSelectedAccounts() {
            const checkboxes = document.querySelectorAll('input[data-account-id]:checked');
            const selectedIds = Array.from(checkboxes).map(cb => cb.dataset.accountId);
            console.log('保存选中状态:', selectedIds);
            return selectedIds;
        }

        // 恢复选中的账户
        function restoreSelectedAccounts(selectedIds) {
            setTimeout(() => {
                selectedIds.forEach(accountId => {
                    const checkbox = document.querySelector(`input[data-account-id="${accountId}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
                console.log('恢复选中状态:', selectedIds);
            }, 100); // 给DOM更新一点时间
        }

        // 按验证码收件时间排序
        function sortByCodeTime() {
            if (sortBy === 'latest_code_received_at') {
                // 如果已经在按这个字段排序，则切换排序顺序
                sortOrder = sortOrder === 'desc' ? 'asc' : 'desc';
            } else {
                // 如果不是按这个字段排序，则设置为这个字段并默认降序
                sortBy = 'latest_code_received_at';
                sortOrder = 'desc';
            }

            // 更新排序图标
            updateSortIcon();

            // 重新加载数据
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 按序号排序（默认正序）
        function sortBySequence() {
            if (sortBy === 'import_seq') {
                // 如果已经在��序号排序，则切换排序顺序
                sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
            } else {
                // 如果不是按序号排序，则设置为序号排序并默认正序
                sortBy = 'import_seq';
                sortOrder = 'asc';
            }

            // 更新排序图标
            updateSortIcon();

            // 重新加载数据
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 按状态排序
        function sortByStatus() {
            console.log('sortByStatus called'); // 调试日志
            if (sortBy === 'status') {
                sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
            } else {
                sortBy = 'status';
                sortOrder = 'asc';
            }

            updateSortIcon();
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 按邮箱地址排序
        function sortByEmail() {
            console.log('sortByEmail called'); // 调试日志
            if (sortBy === 'email') {
                sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
            } else {
                sortBy = 'email';
                sortOrder = 'asc';
            }

            updateSortIcon();
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 按发件人排序
        function sortBySender() {
            console.log('sortBySender called'); // 调试日志
            if (sortBy === 'sender') {
                sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
            } else {
                sortBy = 'sender';
                sortOrder = 'asc';
            }

            updateSortIcon();
            currentPage = 1;
            // 保存选中状态
            const selectedAccounts = saveSelectedAccounts();
            loadAccounts().then(() => {
                // 恢复选中状态
                restoreSelectedAccounts(selectedAccounts);
            });
        }

        // 调试函数 - 在控制台测试排序
        window.testSort = function() {
            console.log('Testing sort functions...');
            console.log('Current sortBy:', sortBy);
            console.log('Current sortOrder:', sortOrder);
            sortBy = 'status';
            sortOrder = 'asc';
            updateSortIcon();
            loadAccounts();
        };

        // 更新排序图标
        function updateSortIcon() {
            const seqSortIcon = document.getElementById('seqSortIcon');
            const statusSortIcon = document.getElementById('statusSortIcon');
            const emailSortIcon = document.getElementById('emailSortIcon');
            const senderSortIcon = document.getElementById('senderSortIcon');
            const codeTimeSortIcon = document.getElementById('codeTimeSortIcon');

            // 更新序号排序图标
            if (seqSortIcon) {
                if (sortBy !== 'import_seq') {
                    seqSortIcon.className = 'fas fa-sort text-gray-400';
                } else {
                    if (sortOrder === 'asc') {
                        seqSortIcon.className = 'fas fa-sort-up text-blue-600';
                    } else {
                        seqSortIcon.className = 'fas fa-sort-down text-blue-600';
                    }
                }
            }

            // 更新状态排序图标
            if (statusSortIcon) {
                if (sortBy !== 'status') {
                    statusSortIcon.className = 'fas fa-sort text-gray-400';
                } else {
                    if (sortOrder === 'asc') {
                        statusSortIcon.className = 'fas fa-sort-up text-blue-600';
                    } else {
                        statusSortIcon.className = 'fas fa-sort-down text-blue-600';
                    }
                }
            }

            // 更新邮箱地址排序图标
            if (emailSortIcon) {
                if (sortBy !== 'email') {
                    emailSortIcon.className = 'fas fa-sort text-gray-400';
                } else {
                    if (sortOrder === 'asc') {
                        emailSortIcon.className = 'fas fa-sort-up text-blue-600';
                    } else {
                        emailSortIcon.className = 'fas fa-sort-down text-blue-600';
                    }
                }
            }

            // 更新发件人排序图标
            if (senderSortIcon) {
                if (sortBy !== 'sender') {
                    senderSortIcon.className = 'fas fa-sort text-gray-400';
                } else {
                    if (sortOrder === 'asc') {
                        senderSortIcon.className = 'fas fa-sort-up text-blue-600';
                    } else {
                        senderSortIcon.className = 'fas fa-sort-down text-blue-600';
                    }
                }
            }

            // 更新验证码收件时间排序图标
            if (codeTimeSortIcon) {
                if (sortBy !== 'latest_code_received_at') {
                    codeTimeSortIcon.className = 'fas fa-sort text-gray-400';
                } else {
                    if (sortOrder === 'desc') {
                        codeTimeSortIcon.className = 'fas fa-sort-down text-blue-600';
                    } else {
                        codeTimeSortIcon.className = 'fas fa-sort-up text-blue-600';
                    }
                }
            }
        }

        // 复制邮箱
        async function copyEmail(email, accountId) {
            try {
                await navigator.clipboard.writeText(email);
                showSuccess('邮箱已复制: ' + email);

                // 自动启动1分钟监控（针对已授权的账户）
                if (accountId) {
                    try {
                        const response = await fetch('/api/monitor/copy-trigger', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                account_id: accountId
                            })
                        });

                        if (response.ok) {
                            const result = await response.json();
                            showSuccess('已启动1分钟监控，将自动检查新邮件');
                            console.log('[监控] 已为账户', email, '启动监控');
                        }
                    } catch (monitorError) {
                        console.warn('[监控] 启动监控失败:', monitorError);
                        // 监控失败不影响复制功能
                    }
                }
            } catch (error) {
                console.error('复制失败:', error);
                showError('复制失败');
            }
        }

        // 复制验证码
        async function copyCode(code) {
            try {
                if (code === '暂无验证码' || !code) {
                    showError('暂无验证码可复制');
                    return;
                }

                await navigator.clipboard.writeText(code);
                showSuccess('验证码已复制: ' + code);
            } catch (error) {
                console.error('复制失败:', error);
                showError('复制失败');
            }
        }

        // 监控功能已移除
        function startMonitoring(accountId) {
            showSuccess('监控功能已简化');
        }

        function stopMonitoring(accountId) {
            showSuccess('监控功能已简化');
        }

        // 设置SSE连接
        function setupEventSource() {
            const eventSource = new EventSource('/api/events');

            eventSource.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === 'new_code') {
                    showSuccess(`收到新验证码: ${data.code}`);
                    // 保存选中状态
                    const selectedAccounts = saveSelectedAccounts();
                    loadAccounts().then(() => {
                        // 恢复选中状态
                        restoreSelectedAccounts(selectedAccounts);
                    });
                } else if (data.type === 'monitoring_status') {
                    if (data.status === 'started') {
                        monitoringAccounts.add(data.account_id);
                    } else {
                        monitoringAccounts.delete(data.account_id);
                    }
                    // 保存选中状态
                    const selectedAccounts = saveSelectedAccounts();
                    updateStats();
                    renderTable();
                    // 恢复选中状态
                    restoreSelectedAccounts(selectedAccounts);
                }
            };

            eventSource.onerror = function(event) {
                console.error('SSE连接错误:', event);
                setTimeout(() => setupEventSource(), 5000); // 5秒后重连
            };
        }

        // 工具函数
        function getStatusIcon(status) {
            const icons = {
                'pending': 'fa-clock',
                'authorized': 'fa-check-circle',
                'error': 'fa-exclamation-circle'
            };
            return icons[status] || 'fa-question-circle';
        }

        function getStatusText(status) {
            const texts = {
                'pending': '待授权',
                'authorized': '已授权',
                'error': '错误'
            };
            return texts[status] || '未知';
        }

        function formatTime(timestamp) {
            if (!timestamp) return '-';
            const date = new Date(timestamp);
            const now = new Date();
            const diff = now - date;

            if (diff < 60000) return '刚刚';
            if (diff < 3600000) return Math.floor(diff / 60000) + '分钟前';
            if (diff < 86400000) return Math.floor(diff / 3600000) + '小时前';
            if (diff < 604800000) return Math.floor(diff / 86400000) + '天前';

            return date.toLocaleDateString('zh-CN');
        }

        function formatFullTime(timestamp) {
            if (!timestamp) return '-';
            const date = new Date(timestamp);
            return date.toLocaleString('zh-CN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        // 获取验证码收件时间显示 - 只有存在验证码时才显示时间
        function getActiveTimeDisplay(account) {
            // 如果没有验证码，显示"无"
            if (!account.latest_code) {
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 检查是否是纯数字验证码（只有纯数字验证码才显示时间）
            const isNumericCode = /^\d+$/.test(account.latest_code);
            if (!isNumericCode) {
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 检查账户是否是刚导入的（5分钟内创建且未经过监控）
            const now = new Date();
            const createdAt = new Date(account.created_at);
            const timeSinceCreation = now - createdAt;
            const isRecentlyImported = timeSinceCreation < 5 * 60 * 1000; // 5分钟内

            if (isRecentlyImported) {
                // 刚导入的账户不显示时间
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 显示验证码收件时间
            return formatFullTime(account.latest_code_received_at);
        }

        // 发件人显示逻辑 - 精简显示
        function getEmailSenderDisplay(account) {
            if (!account.latest_code || !account.latest_code_sender) {
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 检查账户是否是刚导入的（5分钟内创建且未经过监控）
            const now = new Date();
            const createdAt = new Date(account.created_at);
            const timeSinceCreation = now - createdAt;
            const isRecentlyImported = timeSinceCreation < 5 * 60 * 1000; // 5分钟内

            if (isRecentlyImported) {
                return '<span class="text-gray-400 text-base">无</span>';
            }

            const sender = account.latest_code_sender;
            let displayName = sender;

            // 提炼发件人域名或关键信息
            if (sender.includes('@')) {
                // 邮箱地址，提取域名
                const domain = sender.split('@')[1];
                displayName = domain.split('.')[0]; // 取域名第一部分
            } else if (sender.includes('.')) {
                // 可能是包含域名的格式
                const parts = sender.split('.');
                displayName = parts[parts.length - 2] || parts[0];
            }

            // 如果名字太长，截取
            if (displayName.length > 12) {
                displayName = displayName.substring(0, 10) + '..';
            }

            // 常见发件人的友好名称映射
            const senderMap = {
                'github': 'GitHub',
                'microsoft': 'Microsoft',
                'outlook': 'Outlook',
                'amazon': 'Amazon',
                'google': 'Google',
                'apple': 'Apple',
                'facebook': 'Facebook',
                'twitter': 'Twitter',
                'linkedin': 'LinkedIn',
                'perplexity': 'Perplexity',
                'noreply': 'System',
                'no-reply': 'System'
            };

            const lowerName = displayName.toLowerCase();
            for (const [key, value] of Object.entries(senderMap)) {
                if (lowerName.includes(key)) {
                    displayName = value;
                    break;
                }
            }

            return `<span class="text-gray-700 text-base font-medium" title="${sender}">${displayName}</span>`;
        }

        // 验证码显示逻辑 - 只显示纯数字验证码
        function getVerificationCodeDisplay(account) {
            if (!account.latest_code) {
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 检查账户是否是刚导入的（5分钟内创建且未经过监控）
            const now = new Date();
            const createdAt = new Date(account.created_at);
            const timeSinceCreation = now - createdAt;
            const isRecentlyImported = timeSinceCreation < 5 * 60 * 1000; // 5分钟内

            if (isRecentlyImported) {
                // 刚导入的账户不显示验证码
                return '<span class="text-gray-400 text-base">无</span>';
            }

            // 检查是否为纯数字验证码
            const isNumericCode = /^\d+$/.test(account.latest_code);

            if (isNumericCode) {
                // 是纯数字验证码
                return `
                    <div class="flex items-center gap-2">
                        <span class="text-code cursor-pointer" onclick="copyCode('${account.latest_code}')" title="点击复制验证码">
                            ${account.latest_code}
                            <i class="fas fa-copy ml-1 text-xs"></i>
                        </span>
                    </div>
                `;
            } else {
                // 不是纯数字验证码，显示为"无"
                return '<span class="text-gray-400 text-base">无</span>';
            }
        }

        // 账户选中管理
        let selectedAccounts = new Set();

        function handleAccountSelection(checkbox) {
            const accountId = parseInt(checkbox.dataset.accountId);
            if (checkbox.checked) {
                selectedAccounts.add(accountId);
            } else {
                selectedAccounts.delete(accountId);
            }
            console.log('已选中的账户:', Array.from(selectedAccounts));
        }

        // 获取选中的账户ID数组
        function getSelectedAccountIds() {
            return Array.from(selectedAccounts);
        }

        function showSuccess(message) {
            showNotification(message, 'success');
        }

        function showError(message) {
            showNotification(message, 'error');
        }

        function showNotification(message, type) {
            // 简单的通知实现
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 ${
                type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            setTimeout(() => {
                document.body.removeChild(notification);
            }, 3000);
        }

        async function refreshData() {
            const refreshButton = document.querySelector('button[onclick="refreshData()"]');
            const originalContent = refreshButton.innerHTML;

            // 显示加载状态
            refreshButton.disabled = true;
            refreshButton.innerHTML = '<i class="fas fa-sync-alt refresh-loading mr-1"></i>刷新中...';
            refreshButton.classList.add('opacity-75', 'cursor-not-allowed');

            try {
                await loadAccounts();
                showSuccess('数据已刷新');
            } catch (error) {
                console.error('刷新失败:', error);
                showError('刷新失败，请重试');
            } finally {
                // 恢复按钮状态
                refreshButton.disabled = false;
                refreshButton.innerHTML = originalContent;
                refreshButton.classList.remove('opacity-75', 'cursor-not-allowed');
            }
        }

        function addAccount() {
            // 实现添加账户功能
            showSuccess('添加账户功能待实现');
        }

        function deleteAccount(accountId) {
            if (confirm('确定要删除这个账户吗？删除后无法恢复。')) {
                deleteAccountById(accountId);
            }
        }

        // 删除账户的具体实现
        async function deleteAccountById(accountId) {
            try {
                const response = await fetch(`/api/accounts/${accountId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    const result = await response.json();
                    showSuccess(result.message || '账户删除成功');
                    loadAccounts(); // 刷新列表
                } else {
                    const error = await response.text();
                    showError('删除失败: ' + error);
                }
            } catch (error) {
                console.error('删除账户失败:', error);
                showError('删除失败，请重试');
            }
        }

        // 显示导入弹窗
        function showImportModal() {
            document.getElementById('importModal').classList.remove('hidden');
        }

        // 隐藏导入弹窗
        function hideImportModal() {
            document.getElementById('importModal').classList.add('hidden');
            document.getElementById('importTextarea').value = '';
        }

        // 显示进度弹窗
        function showProgressModal() {
            document.getElementById('importProgressModal').classList.remove('hidden');
        }

        // 隐藏进度弹窗
        function hideProgressModal() {
            document.getElementById('importProgressModal').classList.add('hidden');
        }

        // 更新导入进度
        function updateProgress(current, total, message) {
            const progress = total > 0 ? Math.round((current / total) * 100) : 0;
            document.getElementById('importProgressBar').style.width = progress + '%';
            document.getElementById('importProgress').textContent = `${message} (${current}/${total})`;
        }

        // 导入邮箱 - 使用简化的批量导入API
        async function importEmails() {
            const textarea = document.getElementById('importTextarea');
            const content = textarea.value.trim();

            if (!content) {
                showError('请输入邮箱信息');
                return;
            }

            // 隐藏导入弹窗，显示进度弹窗
            hideImportModal();
            showProgressModal();
            updateProgress(1, 4, '正在启动批量导入...');

            try {
                // 调用简化的批量导入API
                const response = await fetch('/api/bulk-import/start', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ import_data: content })
                });

                const result = await response.json();

                if (result.success) {
                    updateProgress(4, 4, '导入启动成功！');

                    // 显示成功消息，说明后台正在处理
                    showSuccess(`成功启动批量导入 ${result.parsed_count} 个邮箱，授权验证将在后台自动处理`);

                    // 短暂延迟后刷新列表
                    setTimeout(() => {
                        loadAccounts();
                    }, 2000);
                } else {
                    throw new Error(result.error || '导入启动失败');
                }
            } catch (error) {
                console.error('导入失败:', error);
                showError('导入失败：' + error.message);
            } finally {
                // 延迟隐藏进度弹窗，让用户看到成功消息
                setTimeout(() => {
                    hideProgressModal();
                }, 2000);
            }
        }

        // 显示清空数据确认对话框
        function confirmClearAllData() {
            document.getElementById('clearDataModal').classList.remove('hidden');
        }

        // 隐藏清空数据确认对话框
        function hideClearDataModal() {
            document.getElementById('clearDataModal').classList.add('hidden');
        }

        // 清空所有数据
        async function clearAllData() {
            try {
                const response = await fetch('/api/clear-all-data', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showSuccess('所有数据已成功清空');
                    hideClearDataModal();
                    // 刷新页面数据
                    setTimeout(() => {
                        loadAccounts();
                    }, 1000);
                } else {
                    throw new Error(result.error || '清空数据失败');
                }
            } catch (error) {
                console.error('清空数据失败:', error);
                showError('清空数据失败：' + error.message);
            }
        }
    </script>

    <!-- 导入邮箱弹窗 -->
    <div id="importModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[80vh] overflow-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-gray-900">
                    <i class="fas fa-file-import mr-2"></i>导入邮箱
                </h2>
                <button onclick="hideImportModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    邮箱信息格式
                </label>
                <div class="bg-gray-50 p-3 rounded border text-sm text-gray-600 mb-4">
                    格式：账号----密码----clientId----授权码<br>
                    （每行一个邮箱信息，使用四个----分隔）
                </div>

                <label class="block text-sm font-medium text-gray-700 mb-2">
                    请输入邮箱信息（一行一个）
                </label>
                <textarea
                    id="importTextarea"
                    class="w-full h-64 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="请粘贴邮箱信息，每行一个...&#10;&#10;JoelGrundydi@outlook.com----password----clientId----refreshToken&#10;RuthMoorekx@outlook.com----password----clientId----refreshToken"
                ></textarea>
            </div>

            <div class="mt-4 flex justify-between items-center">
                <div class="text-sm text-gray-500 flex-shrink-0">
                    支持1-1000个邮箱，相同邮箱自动获得相同编号，后台异步处理授权
                </div>
                <div class="flex gap-3 flex-shrink-0">
                    <button onclick="hideImportModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition whitespace-nowrap">
                        取消
                    </button>
                    <button onclick="importEmails()" class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition whitespace-nowrap">
                        <i class="fas fa-rocket mr-1"></i>开始导入
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 导入进度弹窗 -->
    <div id="importProgressModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <div class="text-center">
                <div class="mb-4">
                    <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">正在启动批量导入...</h3>
                <div id="importProgress" class="text-sm text-gray-600">
                    正在解析邮箱信息...
                </div>
                <div class="mt-4">
                    <div class="bg-gray-200 rounded-full h-2">
                        <div id="importProgressBar" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 清空数据确认弹窗 -->
    <div id="clearDataModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg p-6 w-full max-w-md">
            <div class="text-center">
                <div class="mb-4">
                    <div class="inline-block bg-red-100 rounded-full p-3">
                        <i class="fas fa-exclamation-triangle text-red-500 text-2xl"></i>
                    </div>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">确认清空所有数据</h3>
                <div class="text-sm text-gray-600 mb-6">
                    此操作将永久删除所有邮箱账户、验证码和消息记录，<br>
                    包括邮箱配置、验证码历史、导入记录等所有数据。<br><br>
                    <strong class="text-red-600">此操作不可恢复！</strong><br>
                    请确认您真的要继续吗？
                </div>

                <div class="mb-4">
                    <label class="flex items-center justify-center text-sm text-gray-700">
                        <input type="checkbox" id="confirmCheckbox" class="mr-2">
                        我确认要清空所有数据，并了解此操作不可恢复
                    </label>
                </div>

                <div class="flex gap-3 justify-center">
                    <button onclick="hideClearDataModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition">
                        取消
                    </button>
                    <button
                        id="confirmClearButton"
                        onclick="clearAllData()"
                        disabled
                        class="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition disabled:bg-gray-300 disabled:cursor-not-allowed"
                    >
                        <i class="fas fa-trash-alt mr-1"></i>确认清空
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // 监听确认复选框变化
        document.getElementById('confirmCheckbox').addEventListener('change', function() {
            const confirmButton = document.getElementById('confirmClearButton');
            confirmButton.disabled = !this.checked;
        });
    </script>
</body>
</html>